The paper “JSim, an open-source modelling system for data analysis” provides a succinct update on the functionality and utility of the modelling platform JSim. The paper provides a concise description and link between the JSim community modelling philosophy and how this is facilitated by the JSim software platform. The complete description of the JSim environment will be of interest to the modelling community and this manuscript highlights much of the functionality that they require. This publication could be improved by addressing: As described in the article, the platform JSim has been developed over a period of over 40 years. Previous articles on JSim have been published and this article would be strengthened by highlighting the new features / functionality added to the platform since the previous JSim article. The article, as exemplified in the abstract, focuses on the technical functionality of JSim. If JSim can be readily set up or used by people who wish to analyse their experimental data with models, for example experimental researchers, as opposed to developing new models, then it would be worth highlighting this in the abstract and text. The article does not discuss or review alternate simulation platforms (for example COR, OpenCell, Continuity, CHASTE, SBML simulation environments). For new users wishing to make an informed decision it would be useful to highlight the differences between JSim and alternate platforms. Minor comments In the introduction, the statement that mathematical models provide clear and precise hypothesis that are susceptible to contradiction and that failure to fit leads to rejection needs to be more nuanced, particularly in the case of biology where comparisons are often made between deterministic models and variable experimental results. It is not clear in the loop section if JSim supports nested loops, this could be clarified. It would be of interest to provide some indicative performance measures. For example if simulating a cardiac action potential will JSim solve faster or slower than real time on a conventional desktop. The authors could comment on the utility or potential for adoption of new mark-up languages for spatial problems (FieldML) or problem definition formats (SED-ML). It would be interesting for the authors to comment on how or if they have verified the JSim code stack. 