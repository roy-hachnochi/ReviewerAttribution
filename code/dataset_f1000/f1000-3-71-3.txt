This paper addresses some major and often overlooked problems associated with software development in an academic environment: Lack of long-term vision due to short contract cycles. Lack of attention to usability aspects such as well-thought user interfaces. Lack of documentation, training material, and other follow-up. I share the opinion of the authors that these elements pose a substantial threat to the quality of the scientific software products that are created in academic environment. Lots of valuable academic software development projects fail because of one or more of these reasons, resulting in a waste of efforts. Therefore, I think that papers focusing on solutions to overcome these issues certainly deserve a place. A substantial portion of the paper reads like an introduction to standard software engineering practices, with a focus on scientific software development. It is generally well written, and does provide a useful resource for academic software developers who are interested in learning more about this subject. In addition, the authors present the Butterfly model, which they claim is a novel approach to software engineering, specifically tailored towards scientific software development. It does contain some interesting aspects, specifically the integrated attention to Human-Computer-Interaction (HCI), something often vastly overlooked in academic software development. However, in my opinion the authors tend to overstate the originality of this approach, as it mostly recuperates already known concepts and practices. It does have the merit that it attempts to capture these concepts in a single framework focusing on scientific software development in an academic environment. Perhaps the major problem I have with the way this model is presented is that the authors do not clearly mention its scope of application. Clearly, this model only makes sense for larger and longer-term development projects, whereas lots of academic (bioinformatics) software projects are very small, simple in structure, and short-lived by nature. Applying the Butterfly model or a similar rather heavyweight approach to these projects could be a counter-productive and frustrating. In my opinion, the authors missed the opportunity to stratify the preferred approach according to the size and complexity of the project at hand. A consequent risk is that a reader might be confused and wrongly informed, thinking that this approach should be used for every software development effort, regardless its size. I think that the authors should properly address the scope of the model in the paper. The authors provide a rather large set of software products they claim were developed with the Butterfly model, but do not provide much detail about what this meant in practice. I believe that the paper would vastly benefit if one specific case was picked, for which the practical approach of the Butterfly model would be elaborated, and the benefits would be highlighted in a very concrete way. This would also help to substantiate the authors claim about the novelty of the Butterfly model. Further comments: Moreover the SDLCs famous for the quick development (Rapid Prototype Model, Agile Development Model, Extreme Programming Model, Evolutionary Model, Code and Fix Model), lack in quality software production : This is a rather controversial statement, as the list includes some generally respected models. Since the paper does not provide further arguments to back this claim, I believe it should not be made. Here, function requirements are those which can be implemented (based on existing resources, time, budget, labor, tools, technologies and methodologies), and non-functional requirements are those which cannot be implemented : I do not believe that this the standard definition of function(al) vs. non-functional requirements. Functional requirements specify what the system should do (e.g. input-behaviour-output), whereas non-functional requirements specify how it should do that (e.g. qualities such as speed, robustness, scalability, maintainability, ). Real time examples using Butterfly: I think this should read Real life examples. Other ways, I cant interpret this title. The link to the Isotopo software ( http://www.tr34.uni-wuerzburg.de/computations/isotopo/ ) was broken at the time this report was written. In an ironic way, this seems to illustrate one of the points of the authors about the short-livedness of many academic software projects. I believe that this article should be catalogued as Methods Article rather than Research article. 