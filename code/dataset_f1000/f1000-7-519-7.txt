This article describes the use of new Commands exposed by the eXamine app. The article is well written and adequately describes the Commands. My comments are advisory, and I hope they can improve the paper. The procedure for using Commands should be well known to a proficient Cytoscape user. However, there's an important class of user that wants to use Automation but isn't a Cytoscape expert. To help him/her along good reference Cytoscape manual (Commands Tool), and good to point out that the commands can be used from the Commands dialog, a separate Commands script (via the Cytoscape command line or the Tools | Execute Command File menu item), or via Python. (See last paragraph of Methods section.) Good, too, to remind the user that eXamine commands are in the examine namespace, and that different namespaces resolve to Cytoscape and other apps. This paper is about Python usage. Good to remind user that similar calls can be made from R. In the Introduction, it would be helpful to justify eXamine automation by giving an example of workflows that become possible. This motivates the user. This could be as simple as summarizing Use cases. For Discussion, it may be worth speculating on the value of providing Python and R libraries that act as cover functions for the eXamine REST calls. Python and R programmers really want to think in terms of Python and R, not REST. The color coding in Figure 2 is very effective. Can you also color code the corresponding REST calls in the Use Case section? This may require changing the color scheme so the examples can be easily read. (Maybe Red/Green or Red/Blue??) In Use Cases, good to say where the Jupyter notebooks are ... even if you identify them at the end of the paper. As a side note, I notice that all eXamine endpoints are GET. The Commands convention we're using now is POST, with GET being deprecated. In this case, it doesn't matter much, as the parameter list isn't long and there isn't any return result that would benefit from JSON encoding. For a future release, good to consider POST versions, too. That way, if an error occurs, you'll be able to return it in a CIResponse structure. For the BASE_URL, the datasets are necessary to run the examples. Can you list them at the end of the paper? Of course, they must be persistently available for the life of the paper, correct?? In Use Case 1, step 2, it would be good to give a sentence or two explaining how/why a user would have created this dataset. That's it ... nice job! 