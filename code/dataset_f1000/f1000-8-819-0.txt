The authors address an important question, i.e. detection of real and experimentally generated antisense transcripts in strand-specific RNAseq datasets. With their software tool RoSA, they present a valid strategy to solve this problem. However, there are a number of concerns regarding the manuscript and the software. Manuscript: Introduction: The authors discuss the mechanisms of how antisense transcripts can regulate/interfere with the expression of the sense gene. The sentence ‘Post-transcriptionally, antisense transcripts can compete with sense transcripts for binding sites’, may be applicable in bacteria, but is misleading when studying eukaryotic systems. Post-transcriptional mechanisms involve RNAi, RNA editing or RNA-protein complexes but hardly competition for binding sites with the sense transcript. Moreover, the example given in the text (research by Tufarelli et al. 1 ) is a prime example of transcriptional interference, not of post-transcriptional regulation. Introduction: ‘viral-dependent‘ should read ‘virus-dependent’. 2.2 Using spliced reads: The fact that RoSA cannot distinguish between spurious antisense reads and RdRP generated transcripts are only relevant if datasets from plants and C.elegans are interrogated (that express significant levels of RdRP). The issue becomes critical if particular loci affected by RdRP amplification contribute disproportionately to a genome wide correction factor. In line with reviewer 1, it is unclear how an open reading frame affects RNA dependent RNA polymerization. 2.4 Mitigating spurious antisense: ‘Since the spurious antisense reads are miss-assigned sense reads, RoSA then adds the spurious antisense count for each gene to its sense count’. Adding the spurious antisense counts to the sense counts assumes that reverse transcriptase errors happen at the cost of ‘real’ RNA - cDNA processing. Is this correct? Software: The package as it stands is not user friendly and has several bugs that need to be resolved before the software can be used smoothly. Installation of the Python package using the pip installer worked without difficulties, as did the R package installation. Requesting help at the command-line (via the -h option) for the Python scripts 'make_annotation' and 'count_spliced' had the side-effect of creating an empty log file each time. Running the 'count_spliced' script over a modestly sized alignment file (around 0.5 GB) resulted in over 2000 log files being produced, each detailing the locations at which spliced reads were being counted. This may be related to running the script without drmaa (in serial mode), as a message to that effect was repeatedly printed to the terminal during operation. The Python scripts can be run as R functions, but the help documentation is not available within R. A detailed R package vignette including sample data sets and examples of code would be very helpful, especially for the less experienced users. General comment: Is there a reason why the authors used a storage costly strategy aligning reads followed by counting rather than using alignment free software such as Kallisto or Salmon? 