Reviewer’s Report on the manuscript “flimview…” by Kind et al. This paper describes a python package to load and visualize FLIM datasets. The source code has been deposited on Github, together with two example data files used to illustrate some of the software features. The manuscript is well written and describes the software features with a fair amount of detail. The samples of code I have reviewed appear to be also reasonably well documented. Based on these basic criteria, this work should be valuable as a basis for future developments by researchers interested in developing their own tools for FLIM analysis. I would however encourage the authors to address the following remarks: Presentation: For whatever reasons, the figures do not include color scales, which are present in the Jupyter notebooks used to generate them. This can easily be fixed and would be useful. The datasets shown correspond to microscopy images of biological samples. It is customary (and very useful) to show such data with a scale bar. Consider making the extra effort to generate one (maybe optionally) as part of the code, to encourage scientific rigor. Some of the features of the software are incompletely described. For instance, the package opens .sdt and .ptu files containing photon timestamps , but does not dwell on the choice of timestamp binning used internally. This of course has an effect on RAM resources but also potentially on decay artifacts. As a side comment, the package, as is, does not support pre-binned datasets, as far as I can tell (see below). Some .sdt files are pre-binned only and would not be handled by the current software version. I am not sure what the authors mean by “after compensating for the instrument response function” (p 3)? Clearly the code does fit the decays without IRF convolution (which of course requires the user to provide an IRF file as well). While I understand why binning the original dataset could be interesting to increase SNR and decrease data footprint, I am unclear about the role of convolution with Gaussian or other kernels. What would this correspond to physically? I would understand deconvolution of the image with such kernels (although that would not address the question of how the photon time stamps should be redistributed in the deconvolved image), but the purpose of these kernels, besides image beautification, is mysterious and not an encouraged practice for rigorous analysis. Content: While this software is understandably only offering basic features (opening datasets – 2 kinds only supported, pre-processing, displaying an intensity image and fitting), it seems to be missing what I would consider an expected functionality for a software bearing the flim view name, namely visualization of fluorescence lifetime information. A barebone commercial software such as SPCImage from Becker Hickl, at least does offer a mean lifetime representation, which would not seem to be difficult to implement. Since we are dealing with a software intended for research, I would have naively expected that options to represent the bi-exponential fitted amplitudes and lifetimes as color-coded maps would have been offered. The software allows saving the data in the open and multiplatform HDF5 format. While this is commendable, it is not quite clear what principles are governing the structure of the data in this file format, or for that matter, what the file format actually looks like from a bird’s eye view. Our group has made an attempt to offer a similar type of HDF5-based file format for a slightly different purpose ( photon-HDF5 ), which could be taken as an example (if maybe extreme in its level of detail) of what could be provided to potential users 1 . More importantly, it is not quite clear how this file format will and could evolve, whether it is intended to become a standard, while it has been chosen preferentially to another, etc. A minimum discussion of these considerations within the manuscript, and a more extended presentation online (say on the Github website) would be extremely useful. It would be useful to hear from the authors whether and how they intend to encourage contribution and ensure evolution of the software. Of particular importance would be evidence that there is some kind of quality control (test modules – e.g. such as those described in a software cited in the file loading code, FRETBurst 2 - written using pytest ). Also related to the lack of bird’s eye view description is the absence of discussion of the principles involved in defining the FlimCube class. How can it be extended to support more than one spectral channel (or any other spectroscopic variable)? An additional spatial dimension? An additional temporal dimension? 