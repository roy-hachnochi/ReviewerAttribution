= Summary  The paper presents a program synthesis framework interleaving execution of partially generated programs with a learned component to direct program completion. To combat the growing number of initialized variables, a second component learning to drop ("garbage collect") unneeded variables is learned.  Overall, the paper presents a well-executed evolution of the DeepCoder idea; rather incremental results are balanced by significant experimental evidence for their value.  = Originality  The core idea of learning to predict the most likely next statement based on (current program state, output) tuples (instead of (initial state, output) tuples) is rather obvious. It's present in the reviews for the DeepCoder paper (cf. point 2 of https://openreview.net/forum?id=ByldLrqlx&noteId=HJor8rbNg), in [2] (modulo unclear writing) and also in several concurrent NIPS submissions. This does not mean that the idea is without merit; but that on its own, it does not contribute a significant contribution.  The second idea, of learning which variables to ignore, seems original and is interesting.  = Clarity  The paper is reasonably well-written, but could profit from a few cleanups. For example, Fig. 2 and Fig. 3 could be integrated, creating a space for an explicit algorithm description for the search procedure.   = Quality  Substantial experiments show that the new method is effective in synthesizing more programs in a shorter amount of time than the baseline DeepCoder method. However, while the experiments clearly show that the new contributions works better, they are not covering all interesting ablations (e.g., Do certain DSL instructions have more impact on the overall performance? Do the results depend on the chosen DSL?)  = Significance  Faster program synthesis methods have the potential to improve end-user programming experiences and could thus be very impactful. However, the picked DSL in DeepCoder (and hence here) seems fairly removed from actual usage scenarios, and as no further experiments to other domains are provided, it is unclear if the method would actually be practical.