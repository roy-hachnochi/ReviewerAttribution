Summary: This paper presents a novel algorithm to learn multi-layered representations by stacking gradient boosted trees. Unlike the layer-wise learning of standard stacking(stacked generalization), the proposed algorithm is capable of jointly optimizing all layers. The main ideas is to consider vector-output gradient boosted regression trees as many-to-many mappings between layers, and also learning each layer's mapping (and reverse mapping to recover the layer's input from the output) via optimization like 'target propagation'. Like the cases of learning denoising autoencoders, each layer is learned to recover the input from the output with the corresponding inverse mapping, and this joint optimization of all layers itself is done in a manner similar to the gradient boosting (approximating the negative gradient by regression trees). This enables us to apply not only supervised learning but also unsupervised learning, and actually experiment sections include various interesting examples of representation learning.  Strengths: - Deep learning by neural nets is dominating for multi-layer representation learning, but this paper demonstrates that such multi-layer representation learning is also possible by gradient boosted trees, which would be a quick and accurate everyday tool of practitioners.  Weakness: - This paper's approach proposes multi-layer representation learning via gradient boosted trees, and on the top of that, linear regression/softmax regression are placed for supervised learning. But, we can do the opposite representation learning via neural nets, and on the top of that, decision trees can be used (Deep Neural Decision Forests by Kontschieder et al, ICCV 2015).   Comment: - Basically I liked overall ideas. It can demonstrate the deep learning is not the only option for multi-layer representation learning. It's also nice that the input-output recovery like autoencoder would be also in a gradient descent manner similar to gradient boosting itself. Seemingly, it is simpler than the stacked trees such as Deep Forests (Zhou and Feng, IJCAI 2017).  - Something is wrong in the descriptions of Algorithm 1. If we initialize G_{2:M}^0 <- null, then the first run of "G_j^t <- G_j^{t-1}" for the j=M to 2 loop would become G_M^1 <- G_M^0 = null, and thus the computation of L_j^inv (as well as the residuals r_k) can be problematic.  - This is just a comment, and does not need to reflect the paper this time, but there would be several interesting points to be investigated in future. First, the presented multi-layer representation is probably way weaker than the ones possible with the current neural networks. The presented representation corresponds to the fully connected (FC) architectures of neural networks, and more flexible architectures such as CNN and RNN would not be directly possible. Given this point, it would be unclear whether we should use trees for multi-layered representation learning. At least, we could use boosted model trees having linear regression at leaves, for example. As mentioned in the weakness section, 'differentiable forests' such as Deep Neural Decision Forests was already proposed, and we can use this type of approaches with the modern neural nets for 'representation learning / feature learning' parts. What situation fits what choice would be one interesting open questions.  Comments after author response:  Thank you for the response. It'll be nice to have the revisions on the notations for initialization, and some discussion or mentions about the different approach to integrate tree-based and multi-layer representation learning.