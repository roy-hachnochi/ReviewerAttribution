This paper proposes an efficient negative-curvature search approach, Neon2, which can fast compute a direction to reduce the objective when the gradient is small. Neon2 has two versions, one is for online setting and another is for deterministic setting. The main function of Neon2 is to escape saddle points. It can convert existing stationary point finding algorithms, including SGD, SCGC, Natasha2, GD and CDHS, into local minimum finding algorithms. In particular, Neon2 turns Natasha2 into a first-order method without hurting its computational complexity. When combining with Neon2, the complexity of most algorithms usually outperforming best known results.  On the other hand, Neon2 outperforms its counterpart Neon which is also designed for negative-curvature search in both online setting and deterministic setting. So this guarantees that the algorithm taking Neon2 to escape saddle point is better than the algorithm which is combined with Neon.    I also read the proofs and cannot find any bugs. So I think that this paper makes great contributions to optimization area, especially for escaping saddle points. The weakness is that there is no any comparison experiments to illustrate the effectiveness of escaping saddle points and higher efficiency over other methods, such as Neon. Although I note that most of escaping saddle point algorithms have no experiments, it is better to run several experiments or explain why it is hard to design the experiments.   It seems to be hard to run this algorithm in practice. This is because for the proposed Neon2, its parameters, such as the sufficient large constant C0, the norm of Gaussian noise \sigma, learning rate eta, are selected very carefully such that it can give good theoretical results, while some key parameters, e.g. the first and second-order -Lipschitz smooth parameter L and L2,  are unknown. So how to determine these parameters? As mentioned above, since there is no experiment, it is a little hard for reader to implement the algorithms  for escaping saddle points. 