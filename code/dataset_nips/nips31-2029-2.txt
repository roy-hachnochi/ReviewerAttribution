This is an interesting practical idea. The difficulty of sharing health-related datasets is a real challenge and sharing trained deep learning models would be practically useful. This work provides a hypothetical situation of multiple sites collecting the same data that can be pooled into training a single deep learning model. The need for a method such as Parallel Weight Consolidation (PWC) is 1) so that trained models are passed around (not the data) between sites, 2) subsequent learning is faster, and 3) computational resource requirements are lower.  Strengths: simple and straightforward way to combine trained deep learning model weights.  Weaknesses: with any practical idea, the devil is in the details and execution. I feel that this paper has room for improvement to more thoroughly compare various choices or explain the choices better (e.g. choice of MeshNet and the underlying setting of multiple sites sharing the same exact deep learning model, etc. See below)  Here is what I mean: 1. There is no comparison of using different network architectures. MeshNet may be just fine; however, it is not clear if other base learning methods can compare because it is impractical to assume MeshNet to represent a typical performance outcome 2. There is no baseline comparison: i.e. something like (H+N+B)_MAP that the last row of Table 2 should be compared to. Without a baseline comparison, it is not clear how much is lost with making the practical tradeoffs by using PWC. 3. Subsequent learning procedure is stated to be "much faster," (lines 158) but no formal comparison is given. I feel that this is an important comparison since the paper claims this is a difficulty individual sites have (lines 33-36) 4. What are the computational resources used to fit (aside from time) that makes continual learning easier? 5. Table 2 seems reasonable; however, I have questions about comparing apples to apples in the sense that comparisons should be made between using the same amount of data. For example, H->N and H->B use less data than H->N+B. Also, H->N->H and H->N->H use less data than H->N+B->H. 