This paper addressed the limitation of scalar reward functions in inverse reinforcement learning and attempted to capture the temporal dependency and compositionality in task specification. The proposed approach uses temporal logic equations to represent binary non-Markovian rewards, where compose specifications can be formed via logic operators.  The draft is well written. Though the technical description is quite dense, the authors did a good job laying out the background knowledge and introducing the algorithms and theorems in a clear and organized way.  To infer the specifications from demonstrations, they built a posterior model, so that finding the best specification is cast as a MAP inference problem. However, as the gradients are not well defined for some components of the model, they developed a search-based method to find the most probable specification from a candidate pool.  This search-based method required manual generation of a candidate pool of specifications in order to create a Hasse diagram of all specifications, where search is performed. The method only scores the specifications from the candidate pool. So its performance heavily relies on how the manual generation is done. I wonder if data-driven methods can be exploited to automatically generate such a candidate pool of specifications.  In addition, the authors have only demonstrated the proposed approach in a toy-sized problem described in the introduction. It is unclear of its extensibility and scalability in larger problem instances and more diverse domains. In the toy task used in this paper, the authors created two Hasse diagrams, each with 127 nodes. In this case, the search method has a threefold speedup over the brute force approach. The size of candidate pools and the Hasse diagrams would be significantly larger to tackle more realistic and complex tasks, leading to a large increase of computation time.  The binary Boolean specifications complement the scalar reward functions in its flexibility to capture the time dependency and compositional task structure. However, it might not have the expressive power to represent all task objectives, e.g., running forward as fast as possible. I wonder if the Boolean specifications can be combined with the quantitative reward functions to get the best of both worlds.  The toy example demonstrated the way of finding the optimal specifications in a simplistic grid-world domain. But it is unclear how the logic specifications can be defined in tasks where the subtask boundaries are indefinite, such as continuous control.  Given the concerns regarding the extensibility and scalability of the proposed approach, this work could bear a greater significance with some showcase of more diverse and large-scale domains.  Minor:  Typo: Line 13: “a specifications” --> “specifications”