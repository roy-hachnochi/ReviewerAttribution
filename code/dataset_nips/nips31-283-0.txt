I enjoyed reading this paper and thought it was very well written. The one negative about the paper is that the results presented are somewhat simplistic (the author’s acknowledge this point directly).  The paper considers an interesting recent effort (specifically in the paper “The Case for Learned Index Structures”) to use predictive machine learning models to improve the performance of basic data structures. In particular, this work focuses on the standard Bloom filter for quickly detecting set membership, possibly with some false positives.  “The Case for Learned Index Structures” suggests a “learned” bloom filter, which essentially uses a learning pre-filter to guess if an input query is in the set of interest. If the pre-filter says the element is not, then a backup bloom filter is queried. The hope is that, if the learned bloom filter can guess a good fraction membership queries correct, without too many false positives, than the backup filter can be more compact (i.e. will require less storage). “The Case for Learned Index Structures” observed that empirically, this strategy could improve on the space/accuracy tradeoff over a standard bloom filter.  The goal of this paper is to formalize the learned bloom filter problem. In particular, it suggests the natural model where we have access to a training set that contains negative examples (i.e. not in the target set) drawn from the same distribution that future negative queries will come from. It then states some very basic results on estimating the false positive rate of a learned filter by sampling from this query distribution (specifically, just apply a Chernoff bound). Such an estimate is necessary to properly optimize how aggressively the learned pre-filter should try to predict that elements are in the target set — the more it does so, the smaller the backup bloom filter needs to be for a given false positive rate, but also the higher the false positive rate of the learned pre-filter.  Next the paper discusses how compact the learned pre-filter would need to be to justify its use over simply using a larger block filter. I didn’t think this section was particularly, insightful. The size of a bloom filter roughly needs to scale linearly with m, the number of elements in the set of interest. Of course if the the learning algorithm can find a pre-filter that reduces m and uses less than m space, there’s an opportunity for improvement.   Finally, the authors present a suggested improvement to the learned bloom filter. The main observation is that, for a fixed pre-filter, there is not much to gain from using more bits in the backup bloom filter once its false positive rate is about comparable to that of the pre-filter: at most we can improve on the false positive rate by a factor of 2. A more effective use of extra space is to use another bloom filter *before* the learned filter, which will more effectively reduce the overall false positive rate.   I think this is a nice suggestion, although I would have liked to see some more justification, perhaps experimentally. There are many ways to use extra space: increase the size of the learned filter, decrease the threshold of the learned filter so that more queries pass though (and simultaneousy increase the size of the backup filter), run multiple separately learned filters in parallel, etc. That said, the authors idea of “sandwiched” filters does at first glance seem like a reasonably practical way of implementing learned filters in practice, since it can take essentially any learn filter with any false positive rate and combine that function with an easily computed number of additional bits to achieve a specified target accuracy.  Overall, I found this paper valuable because it introduced me to the learned bloom filter problem with very clear exposition and hopefully puts this problem on firmer ground for future research. At the same time, the actual novel research contribution of the paper is relatively small. However, it is not so far below that of many NIPS papers, so for me the quality of exposition and “problem building” push the paper over the threshold for acceptance.   Small comments and typos:  - paragraph from lines 33-48 seems redundant with 25-32. - I thought the rather long discussion about the training set and future query set needing to come from the same (or nearly the same) distribution superfluous.  I think it should be obvious to the vast majority of readers that guarantees will not carry over when this is not the case.