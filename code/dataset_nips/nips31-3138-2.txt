There is substantial interest at present in scaling up parallel training of DNNs across multiple machines. While much of this work has been focused on asynchronous SGD, it has recently been shown that one can increase the batch size of synchronous training to tens of thousands (on ImageNet) with only a small drop in the final test accuracy. However parallel synchronous training suffers from the straggler effect, whereby a small tail of machines may take substantially longer to compute gradients than the bulk, potentially significantly reducing the training speed. This paper proposes to use amortised inference to learn a generative model which predicts when to discard slow gradients.  Originality: The paper builds on a recent work [1] which proposed to simply discard a fixed fraction of slow gradients each update. They claim to be the first to learn a model to optimise the decision process during training.  Significance: This seems a sensible and valuable contribution, with promising early results.  Quality: The quality seemed good, although I am not familiar with this field. Some specific comments:  1. I’d recommend that the authors couple the batch size, which varies from iteration to iteration, to a linear scaling relationship with the learning rate. If one assumes that slow workers are not correlated with particular training examples, this will ensure that training is not adversely affected by fluctuations in the batch size.  2. It would have been nice to see some back of the envelope estimates of how much wall-clock time could in principle be saved. Ie how long on average do machines sit idle in a standard run, and how much is this reduced by the simple baseline of [1]?  3. I’m confused by section 3.1.1: The authors state they assume the run times are drawn from a Gaussian distribution, but surely this cannot be since all run-times must be positive? (To make such an assumption valid the mean would have to significantly exceed the standard deviation, in which case there is no straggler effect)  4. Would it be worth letting a small fraction of the stragglers run to completion to gather information on the tail of the run-time distribution?  5. The model strikes me as rather complicated, especially since the end task is to infer a single number between 0 and 1 (the fraction of gradients to collect). Likely in most cases the distribution does not change significantly during training. Would a simple bandit or regression model not achieve most of the gains reported here?  Update: I thank the authors for their helpful response. I note that the beta distribution provides a natural probability distribution over [0,\infty], however I am happy with the argument that this is best approximated by a Gaussian for simplicity, and remain positive about the work.