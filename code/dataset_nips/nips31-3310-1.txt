* Summary:  This paper proposes a new method to differentiate a loss through ODE solvers. Instead of tracking all operations performed by the solver, it proposes to solve another ODE backwards in time, whose solution brings all derivatives of the loss with respect to the initial values and parameters, thereby achieving memory gains. This leads the authors to propose ODE-Nets, which are networks solving a differential equation parametrized by a neural network. Numerical experiments span classification and generation. For generation, a continuous-time normalizing flow is proposed. Specifically for time-series, a latent generative model allows to take into account irregularly sampled data at continuous times.  * Opinion:  This is a good paper which provides a good contribution for the community. It is not that original witness previous works on the interpretation of resnets through the lens of dynamical systems, but the reduction in computational time for the backprop still makes it significant. The span of the experiments demonstrate the wide applicability of the introduced method. The ideas are clear overall, except for some parts. There are two weak points: - Experiments are only performed on toy-ish datasets. For the classification example, I would have preferred CIFAR10 to MNIST. - Writing could be improved in some parts; slightly reorganizing the paper would help. Despite these weaknesses, I tend to vote in favor of this paper.  * Detailed remarks:  - The analysis in Figure 4 is very interesting. What is a possible explanation for the behaviour in Figure 4(d), showing that the number of function evaluations automatically increases with the epochs? Consequently, how is it possible to control the tradeoff between accuracy and computation time if, automatically, the computation time increases along the training? In this direction, I think it would be nice to see how classification accuracy evolves (e.g. on MNIST) with the precision required. - In Figure 6, an interpolation experiment shows that the probability distribution evolves smoothly along time, which is an indirect way to interpret it. Since this is a low (2D) dimensional case, wouldn't it be possible to directly analyze the learnt ODE function, by looking at its fixed points and their stability? - For the continuous-time time-series model, subsec 6.1 clarity should be improved. Regarding the autoencoder formulation, why is an RNN used for the encoder, and not an ODE-like layer? Indeed, the authors argue that RNNs have trouble coping with such time-series, so this might also be the case in the encoding part. - Do the authors plan to share the code of the experiments (not only of the main module)? - I think it would be better if notations in appendix A followed the notations of the main paper. - Section 3 and Section 4 are slightly redundant: maybe putting the first paragraph of sec 4 in sec 3 and putting the remainder of sec 4 before section 3 would help.