# Response to authors’ response # I appreciate the authors’ effort in response. I agree that the derivation and how to implement task conditioning are novel and valuable. However, I do not agree with the authors' claim in the response that they improve a large margin than existing methods when it becomes clear that row 1 of Table 3 is [25] with a stronger architecture. And I do think a detailed discussion on architectures in Table 1 would make the contribution clear. Besides, the auxiliary co-training seems to contribute a lot in Table 3, but the description is short and not clear. The authors must strengthen this part. The task conditioning is not new ([30] has done so) and thus extending the discussion in response is highly recommended. Since the authors replied to most of my comments, I remain the score.  My specific response is in [] after each comment.  # Summary # This paper investigates how to learn metrics for few-shot learning. The authors theoretically and empirically show the importance of metric scaling in the learning objective. They further show that learning task conditioning metrics could improve the results (by roughly 1 %). The paper provides an insightful introduction and related work to categorize existing few-shot learning algorithms. However, the idea of learning conditioning metrics (or features) seems to be proposed already but the discussion is missing. The experiments also need more explanation to clarify the contributions.  # Strengths # S1. The idea of metric scaling is theoretically and empirically justified. Section 2.1 should benefit not only few-shot learning, but the whole metric learning community.  S2. The introduction and related work are well organized and inspiring.  # Main weakness (comments) # W1. The idea of learning task conditioning metrics (or feature extractors) has been proposed (or applied) in [30], where they learn f(x|S) and g(x|S) where S is the data of the current task. The authors should discuss the relatedness and difference. More informatively, why the proposed method significantly outperforms [30] in Table 1. [Thanks to the authors’ response. Please include (an “extended” version of) the discussion in the final version. I won’t say that [30] is doing postprocessing, however, since by encoding S into LSTM, the feature extractor does change.]  W2. The comparison in Table 1 might not be fair, since different models seem to use different feature extractors. The authors should emphasize / indicate this. The authors should either re-implement some representative methods ([25], [30]) using the same architecture (e.g., Res-12) or implement the proposed method in the architecture of [25], [30] for more informative comparison. Is the first row of Table 3 exactly [25] but with the Res-12 architecture? If not, since the proposed model is based on [25], the authors should include it (with the same architecture of the proposed method) in Table 3.  [The authors confirmed. From Table 3, it does show that the proposed method still outperforms [25] by 2~3% (compared to the first row). But considering how changing the architecture can largely improve the performance (i.e., comparing Table 1 [25] and Table 3 row 1), the authors need to discuss the architecture of methods in Table 1 in detail. For now, the improvement in Table from [25] to Ours might be misleading.]   W3. In Table 3, it seems that having scaling doesn’t significantly improve the performance. Can the authors discuss more on this? Is it because the Euclidean metric is used? If so, the footnote 6 might be misleading because scaling should help a lot for the cosine similarity. [The authors respond. Thanks.]  W4. Section 2.4 on the auxiliary task is not clear. Is the auxiliary task a normal multi-way classification task? It would be great to have the detailed algorithm of the training procedure in the supplementary material. [No authors' response.]   # Minor weaknesses (comments) # W5. The idea of scaling (or temperature) is mentioned in some other papers like Geoffrey Hinton et al., Distilling the Knowledge in a Neural Network, 2015 It would be great to discuss the relatedness. [The authors responded. Please include it in the final version.]  W6. The way FC 100 is created seems to favor learning task conditioning metrics, since now each task is within a superclass, and the difference between tasks (e.g., from different superclasses) will be larger than that if we sample the tasks uniformly from 100 classes. It would be inspiring to compare the improvement of the proposed methods on FC 100 and a version where a task is sampled uniformly. [No authors' response.]   W7. Why the experiment on the popular Omniglot dataset is not conducted? [The authors provide explanation. But it would be great to include it in the final version.]  W8. Please add the dataset reference to Table 1. Please include background (i.e., algorithm or equation) on [25] in Section 2.1 since it is the baseline model used in the paper.