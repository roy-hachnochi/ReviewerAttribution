[Update after end of author response period] I've left my original (relatively high) score for the submission unchanged. I think the optimization approach proposed in the paper is novel enough to justify the high score, and that the experimental evaluation is sufficient to show that the optimization method is doing something sensible. I also think that the new experiments from the rebuttal will improve the paper, and will help address some of the concerns raised in the original reviews.  Comparison with related work: The experiments in this paper show state-of-the-art results. However, in the original submission, it was difficult to tell the extent to which quality and sample efficiency improvements over NASNet/AmoebaNet were coming from the optimization algorithm, as opposed to search space improvements or longer training times. The authors directly address both points in their rebuttal, and I believe the experiments they mention will help explain where the efficiency improvements come from. In particular: (i) shortening training times from 100 epochs to 25, and (ii) increasing the number of operations in the search space from 11 to 19.  ENAS Experiments: I believe that including more information about the ENAS experiments mentioned in the rebuttal would significantly improve the final submission. First: it would make the work more relevant to practitioners who do not have access to hundreds of GPUs for experiments. And second: it's currently unclear which search algorithms work well with ENAS's weight sharing scheme, and the fact that NAO can work well in this setting is a nontrivial finding.  [Original Review] The authors propose a new method for neural network architecture search. Like "Learning Transferable Architectures for Scalable Image Recognition" (Zoph et al. 2017) and "Regularized Evolution for Image Classifier Architecture Search" (Real et al. 2018), their method runs in a loop where (i) a controller proposes a set of child model architectures, (ii) they measure the accuracy of each child model after training for a fixed number of epochs on CIFAR-10, and (iii) they use the observed model accuracies to generate a new set of improved architectures to evaluate.  The main contribution of this paper is a novel method for proposing child model architectures to evaluate. The authors simultaneously train three components: (i) an encoder which maps discrete neural network architectures to a continuous embedding space, (ii) a performance predictor which predicts accuracies for architectures in the continuous embedding space, and (iii) a decoder which maps continuous embeddings back to discrete network architectures. Once these components are trained, it is possible to map a neural network architecture to a continuous embedding, mutate the embedding (via gradient descent) to increase its predicted accuracy, and then map the mutated embedding back to a discrete architecture. This mutation step is somewhat reminiscent of the evolution-based approach proposed by Real et al., except that the mutation function is learned.  Originality: The proposed search method (rather than its application to architecture search) is the part of the paper that I find most exciting. The idea of perturbing a continuous-valued embedding to improve a discrete optimization problem is very clever, and I don't think I've seen anything like it elsewhere. It seems like similar techniques should be applicable to other discrete optimization problems, and I'd love to see follow-up work in this direction.  Clarity: The paper is well-written and easy to understand.  Quality: I'll distinguish between the thoroughness of the experimental evaluation (which is very good) and the usefulness of the method (which is an incremental improvement over previous work). Experimental evaluation: The authors do a great job of setting up their experiments carefully and validating their setup. They show that their quality prediction network gets better at ranking different architectures over the course of a search; ranking seems like the a great metric to consider. They also (critically) include experiments to demonstrate that their architecture mutation step is actually improving the quality of their architectures.  Usefulness of the method: * While models evaluated on CIFAR-10 are state-of-the-art, I'm more excited about the general search method than about the specific application to architecture search. * Model accuracies on CIFAR-10 are competitive with or slightly better than previous results by Zoph et al. and Real et al. while using fewer resources. Resource requirements are orders of magnitude greater than weight-sharing methods like Pham et al.'s "Efficient Neural Architecture Search via Parameter Sharing", but the accuracies found in this paper seem slightly better. * In the experiments, the efficiency gains obtained by the search method (evaluating 1,000 architectures instead of 20,000) are partially offset by the increased number of training epochs per candidate architecture (100, compared with 25 in previous work). Looking at Appendix 1.3, it seems possible that changes to the operations in the search space (focusing on operations with small kernels like 2x2 convolutions instead of ops with larger kernels like 5x5 or 7x7 depthwise separable convolutions) may account for some of the efficiency gains.  Small question: Appendix 2.3 mentions an activation function called "tanhshi." Is that a typo?