The paper proposes a online method for solving constrained POMDPs (CPOMDPs) using Monte-Carlo tree search (MCTS). The proposed foundation of the algorithm uses the dual of the belief state MDP with a scalarized reward over the reward function and scaled non-negative cost (with parameters lambda). Its key insight is that if parameters lambda are fixed, and are valid to satisfy the constraints, then it is simply a normal unconstrained POMDP. Thus, the procedure solves a belief MDP with fixed lambda, evaluates the costs, and intelligently improves parameters to ensure they do not violate the cost constraints. On top of this, a cost-constrained POMCP algorithm is used instead to approximately solve the unconstrained POMDP at each step. A theoretical analysis shows the PWLC of this scalarized belief state MDP, that the negative subgradient improves the objective, and that the algorithm converges in the limit (under some assumptions). Experiments compared a naive baseline agent (ensures a local action does not violate constraint, if so a random action is taken), CALP, and the proposed CC-POMCP on toy domain and three RockSample domains. Additionally, to show its scalability, results for the Pong CMDP successfully show the effect of increasing the constraints that the agent remain near the center.  The paper provides a decent introduction to CPOMDPs, including a brief motivation and survey of related methods. While it is not surprising that MCTS performs well on these larger problems, the formulation of the constrained belief MDP and solution to handle the parameters (lambda) is simple with good mathematical support. There was one concern, however, regarding the guarantee that lambda always produce a feasible policy:  1. Proposition 2, which as cited comes from Lemma 4 in [13], requires that the rewards be non-negative (as well as the other assumption). Only under this assumption, does it make sense to clip lambda to [0, Rmax / (tau * (1 - gamma))]. This important assumption was not properly emphasized in the paper, as many (C)POMDPs do not have this property. If needed, then it would limit the application of the proposed algorithm. Is there any way to fix this limitation? Perhaps it is not a concern, if so, why? As it is an essential component that ensures the constraints are not violated, is there perhaps another way to ensure they are not and still use POMCP?  Overall, the paper clearly describes the problems surrounding solving CPOMDPs and presents a solution with sufficient convincing evidence that it works in practice. While there is a concern raised above, the paper still contributes a good solution for solving CPOMDPs online with another MCTS-based approach. 