This paper proposed using symbolic program synthesis to solve the lifelong learning problem: a symbolic synthesizer dose type-directed search over a library of previously trained neural functions to generate a model for a given tasks, then a neural module fine tunes this generated model using SGD. This method called HOUDINI mainly addresses 2 problems in lifelong learning: (1) catastrophic forgetting is prevented by the use of function library in which the trained models are frozen; (2) negative transfer is prevented because HOUDINI is shown to be able to navigate itself to the right model for reuse. The strength of HOUDINI rely on 2 things: First, the models in the library are differentiable, this use of differentiable programing language technique is not new (the authors have mentioned the existing approach NTPT), but they advance it by developing a new typed functional language also called HOUDINI to combine these models. Second, such language also makes it possible to represent a wide range of architecture (CNN, RNN, etc) in a compact way and speed up the search (by reducing the search space to only type-safe modules). HOUDINI has been validated using tasks with different level of transfer. The experiment results show that HOUDINI has better initialization and stays outperformed than other considered methods.  (1) Quality and clarity: The paper is generally clear. The problem is explained, experiments are designed to consider different transfer situations. But the authors should improve the structure to make the paper more clear. After reading the authors' responses, I found some key information is absent in this first version. Having an end-to-end example and explain it well will help readers understand questions like why ‘nn_cs1_2’ is a correct learning source for count_d1 task. Also, the authors should comment more on their experiment results, for example the ‘jumps’ around training dataset size ~ 3000 (in the authors response they promised to detail this),  (2) Originality: The proposed language HOUDINI is quite original thanks to its combination of functional language and symbolic synthesis. Also using types to reduce research is quite creative.   