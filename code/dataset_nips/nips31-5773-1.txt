The paper studies a robust formulation of maximizing a submodular function subject to a cardinality constraint. Specifically, the goal is to maximize the minimum of m submodular functions f_1,..., f_m subject to picking at most k elements. When there is no restriction on k and m, the problem can be hard to approximate. The paper focuses on the regime where m << k and in this regime, it is possible to avoid the hardness and obtain approximation solution.  The algorithm is inspired by previous work by CCPV'07. Previously the algorithm needs to guess the elements with large value because rounding only works when all elements have small values. Furthermore, previous work focused on getting polynomial time and uses a slow continuous greedy approach. To address the first problem, the paper focuses on a special case m<<k and the cardinality constraint instead of matroid constraint in CCPV'07. The key is that the number of large items is small compared to the budget and one can get all of them without losing too much budget. For the second issue, the paper uses a multiplicative weights method instead of the continuous greedy and get faster running time at the cost of losing in the approximation factor. The proof follows fairly standard structure of multiplicative weights algorithms but with some changes. For instance, to argue that the average solution is good, usually the proof appeal to the concavity/convexity of the objective, which is not true here. However, due to result of CCPV'07, one can still argue for a 1-1/e approximation.   Overall, this paper is in a good direction as it avoids the impossibility result and obtains a result in an interesting regime (small number of objective functions compared with the budget). The downside is that the proof is largely standard multiplicative weights algorithm plus some interesting facts about submodular function but those facts was shown by previous works.  Some minor comments: Statement of lemma 12: are the lambda's supposed to be p? Proof of lemma 13: it is not clear why the sum of lambda's disappears at the end of line 29, but perhaps this is because they are p's? 