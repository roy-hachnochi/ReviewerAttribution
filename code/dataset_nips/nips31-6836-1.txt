This paper shows that prior-likelihood conjugacy relationships can be recognized and exploited from a Python program that computes a log-probability in a form such as the sum of a log-prior and a log-likelihood.  The core of the approach is read out the log-joint expression (by operator overloading) then rewrite it into a canonical form (which can then be recognized).  This work makes substantial progress on an important problem.  The crucial and novel part of this work is the system of term-writing rules and the canonical form that emerges, not how term read-out and rewriting are implemented in Python.  Unfortunately, the paper does not describe the rewriting rules (in the form of a table, say) or the canonical form (in the form of a grammar, say).  The paper should give enough information to justify the central claim (lines 174-176) that "the rewriting process is guaranteed to terminate".  As it stands, this claim is not justified: why is it that "our rewrite rules do not generate cycles" and what is the mathematical definition for a rewrite to "make progress toward a canonical form"?  An unorganized pile of rewriting rules is not a robust or scalable way to perform computer algebra, so it's essential that the paper explain how this pile of rewriting rules is in fact organized.  It seems that Autoconj can produce both distribution objects (which can draw samples) as well as density functions.  Because the prior and the posterior related by conjugacy are usually represented in the same way, I expected Autoconj to be able to take distribution objects as input also, so I was disoriented to find that the input to Autoconj is a density in all examples.  Please clarify.  The examples in Section 5 and the discussion of related work in Section 4 should be better related.  In particular, the paper should clarify whether Autoconj can "exploit multivariate-Gaussian structure" -- how is the model on lines 319-320 programmed, and is the Kalman filter in the supplemental material multivariate-Gaussian?  I read the author response. I encourage the author(s) to revise the paper (not just the appendix) to explain (not just specify) the rewriting rules and their termination. The high-level description given in the author response makes it seem as if the rewriting rules merely expand a polynomial into a sum of monomials. So in particular, the sequence of metric-decreasing rewrites that handle the Kalman filter in the supplemental material should be made completely explicit. I also encourage the author(s) to clarify the setting of the paper by addressing Reviewer #3's questions in the paper.