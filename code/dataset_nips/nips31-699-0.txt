Summary ------- In this paper, the authors study the problem of recovering a core set of nodes in a graph given the interactions between nodes of the graph. There are cases, where edges are collected by observing all interactions involving some core set of nodes and the identity of the core nodes is lost. This can happen in real scenarios, because (1) they are lost due to difficulties in data provenance, and (2) the network consists of “found data” obtained in settings such as counter-surveillance. Recovering the core nodes is a planted vertex cover problem. The proposed method gets as input a simple undirected graph (core set nodes + fringe nodes - nodes outside core set with interactions with nodes in core set) and the output is the core set (a set of nodes in the core set). The method is based on the theory of fixed-parameter tractability and algorithms for recovering the core. The authors have experimented with various real world datasets (with ground truth) and have compared with some baselines. The results show that the method proposed outperforms the comparison, it is faster (in runtime) and very simple to implement.   Strong Points ------------- - With limited assumptions the paper provides provable guarantees for approximately recovering unknown vertex covers. - The paper contains well-defined theoretical analysis. - Experimentation and evaluation on a variety of datasets and well-known baseline comparison methods.  Weak Points ----------- - The writing of the paper can be improved. Section 1 contains long sentences and as a result the reader might lose the focus that each sentence is aiming at. - The flow of the paper and more specifically Section 2 can be improved. There is an enumeration of theorems, lemmas, propositions, corollaries and only in Section 3 (where the algorithm is revealed) it becomes clear to the reader where all these lead to.  Overall -------- I liked the paper a lot. The problem is related to NIPS crowd, it is well supported by real world applications (also with references) and the authors provide a well-defined algorithm with provable guarantees. It is very interesting that the implementation to solve this problem is only 30 lines long and simple to code.   *** After reading author's feedback *** I am satisfied with the answers to all reviewers, especially to the reasonable comments by R3. 