In this paper, the authors study the problem of maximizing a non-monotone submodular function subject to a cardinality constraint and present a deterministic algorithm that achieves (1/4 - \epsilon)-approximation for the problem. Their fastest algorithm makes O(n / \epsilon \log(n / \epsilon)) queries to the oracle.  While Buchbinder et al. (2015) have designed a randomized algorithm with better approximation factor and time complexity,  the algorithm presented in this paper is deterministic. Although I believe deterministic algorithms which guarantee the performance in the worst-case scenarios are interesting for many researchers in the field, the contribution level of this paper is borderline.   Also, I checked almost all the proofs in this paper. As far as I have checked they are correct and rigorous.  Next, I will provide a few comments which can improve the quality of this paper:  Related work: There are several related works which are missing from this manuscript:  1. Maximizing non-monotone submodular functions subject to a matroid independence constraint (generalizes a cardinality constraint): [V2013] Jan Vondr√°k: Symmetry and Approximability of Submodular Maximization Problems. SIAM J. Comput. 42(1): 265-304 (2013).  2. Streaming  algorithms for non-monotone submodular functions: [FKK2019] Moran Feldman, Amin Karbasi, Ehsan Kazemi: Do Less, Get More: Streaming Submodular Maximization with Subsampling. NeurIPS 2018: 730-740.  3. Improve the adaptive complexity for non-monotone submodular functions: [FMZ2019] Matthew Fahrbach, Vahab S. Mirrokni, Morteza Zadimoghaddam: Non-monotone Submodular Maximization with Nearly Optimal Adaptivity and Query Complexity. ICML 2019: 1833-1842  Experimental results:  1. The low adaptivity algorithm of  [FMZ2019] could be beneficial to be compared with the algorithms presented in this paper. 2. The algorithms of Feldman et al. (2017) and [FKK2019] are designed for maximizing non-monotone submodular functions subject to more general constraints. It would be interesting to compare the FIG algorithm with them. 3. The difference between Social Network Monitoring function and Maximum Cut function is not clear to me.   Code and reproducibility:  While the authors have provided a link for the source code, I could not find any file at the following address: https://gofile.io/?c=ChYSOQ   Minor comments: 1. Line 36: achieve 2. Line 119: ";j;greedy" 3. Lines 5 and 7 of Algorithm 1: x \in [n] 4. Line 321 proof of lemma 2: in the definition of \hat{O}_i the last element in the set should be o_{i-1}. This happens again at line 326. Please check the proof for these typos one more time. 5. The proof sketch after Theorem 1 is vague and difficult to follow.    -------------------------------------------------- Thanks for the answers. I would really appreciate if you could improve the sketch of the proofs in the camera-ready version.