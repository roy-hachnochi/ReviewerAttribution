The topic of this paper is highly relevant, since stability guarantees are often sought after for learned policies. While I'm generally excited about the approach, the paper does not address aspects that might make the technique applicable to domains with non-smooth (e.g. legged locomotion) or unknown dynamics (e.g. a real robot or even a physics simulator). The condition in Eq. 1 is a strong one and I understand the theoretical need for it. However, I'm wondering if there's any value to the proposed technique in case this condition is not met? Will the inclusion of the Lyapunov risk as a term in the cost function yield feedback controllers that are more robust in practice, even for non-smooth systems?  A few more detailed comments: - You mention that Relu based networks can't be supported from a theoretical point of view. Does this matter in practice? - Have you tried your approach on any more complex systems or using a learned (fitted) dynamics model rather than a given one? - Please provide learning curves for the various experiments. As a reader, I have no idea how complicated it is to learn the stability guarantees as compared to just optimizing a normal feedback controller. How often does it fail? Is failure to find a stable controller more often the case for larger (more DoF) system.  Originality: Good. This paper combines Lyapunov theory and learning based control. The basic algorithm (without the SMT solver) appears to be relatively straightforward to add to an existing setup (given it has differentiable dynamics). Quality: OK. The experiments seem difficult to reproduce with the information provided. Clarity: OK. The writing itself is of high quality. However, the paper could be better organized. As a reader, I'm missing a concise overview of how the algorithm works.  Significance: High. If it's possible to obtain stability guarantees as part of the learning process for non-trivial tasks, then that's a significant step forward. This paper appears to be a step in the right direction.  