The setting in which the paper operates is given a compiler T, compiler options O and output machine code M of a function to find source code S that compiles to M using T and O. This is not a particularly practically compelling case, because it usually breaks with compiler optimizations, but still it is a good start.  The main idea of the paper, however, is an elegant process of first generating a "sketch" program which may not necessarily be correct on the first shot, but is then iterated until it is correct. Because the compiler is present as an oracle, it is always possible to check if the correctness requirements are satisfied. This process is a good idea, because the translation process from machine to source code needs to be always right, but a one-shot neural generation procedure is unlikely to capture the entire semantics properly and will inevitably output some errors. I expect the of numerical (or string) constants would be difficult to capture (Q1). 