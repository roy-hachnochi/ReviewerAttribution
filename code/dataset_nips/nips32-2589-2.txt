The paper presented a method called HOOF for automatic hyperparameter tuning of policy gradient methods that is computationally and sample efficient. The basic idea is to perform greedy optimization of the hyperparameters at each step such that updating the policy for one step using those hyperparameters leads to the best policy. At each timestep, different policy candidates are generated by updating the current policy network using different hyperparameters. Then, these candidates are ranked according to weighted importance sample (WIS) estimates of the cumulative reward using trajectories collected by the current policy, and the best update is chosen. Also, in case of first-order methods where the action distributions can change drastically after each update, the KL divergence of the action distributions of the policy after update is bounded so that the WIS estimates are reliable. The proposed method is used for hyperparameter tuning of A2C and NPG in four MuJoCo benchmarks against manually tuned hyperparameters and meta-gradients. It is shown that the proposed method is able to achieve similar or slightly better performance on these benchmarks by finding the right hyperparameters within a single run.   The paper is fairly well-written and easy to follow. Previous works on automating hyperparameter selection require multiple sequential or parallel runs, which causes a drastic reduction in sample-efficiency. It is very interesting to see developments on tuning hyperparameters within a single run. However, the work presented in the paper is limited to policy gradient methods and it cannot be used to tune the architectures of the networks. I hope that it inspires future works along the same direction for policy-based and also value-based and model-based RL algorithms.  Comments:  - Why is \pi used to denote both the policy function as well as it's parameters?  - What is the effect of learning (\gamma, \lambda) conditional value functions in the performance reported in Figure 2? Is it just about computational efficiency or does it also have an effect on the performance of the agent?  - In Table 1, the sensitivity of \epsilon is measured in the range of values [0.01, 0.07]. How much does \epsilon have to change to see significant change in the performance?   Post-rebuttal comments: Thanks for the clarification. I recommend acceptance.