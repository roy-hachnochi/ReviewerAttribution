The paper considers a version of the adversarial stochastic multi-armed bandit problem where the feedback received from pulling an arm is delayed. The delays are time-varying and can be selected by an oblivious adversary. The main algorithm presented is referred to as the “skipper” algorithm, and refines exponential weights analysis by skipping rounds with large delays, and is based on prior knowledge of the cumulative delay. When delays are only revealed each times an action is taken, and no prior information is granted on the cumulative delay (or the horizon length) the authors provide a doubling scheme that achieves a refined regret bound.  I like the paper and definitely appreciate various aspects of it. The topic and the algorithmic approach are interesting, the paper is well-written, and, as far as I could tell, analytically correct.  I don't have major concerns regarding the paper. My main comments are as follow.   1. Since in many application domains delay information is only realized when feedback arrives. This is true also in the motivating examples that are given by the authors in page 2 (while expected delay might be available at time of action, the realized delay can often be different from this expectation. It would definitely be insightful to understand how one could extend current results and algorithms in that direction, and a first step in this direction can be to have some robustness analysis that will help to understand to extent to which the performance of the doubling scheme deteriorates when actual delays are (even a bit) different from the one observed at the time of the action.   2. Similarly, it would be insightful to understand how robust the skipper algorithm is for misspecifications in the cumulative delay D. I apologize if I missed a discussion along these lines in the paper.   3. It would be very insightful, and would clearly increase the contribution of the paper, to have some form of optimality for the results. Ideally that would be established through a refined lower bound for time-varying delays, but even some discussion using examples or numeric analysis might be helpful in that respect.  