This submission fits into a recent trend of developing more expressive, "layers" for deep learning, with the intent of adding more structure to data-driven models. A pivotal part of achieving these goals is making such layers differentiable in an efficient manner. Here, the authors develop a differentiable cloth simulator. Moreover, the authors also improve on a previously developed method for differentiating through optimization problems in order to achieve a significantly more efficient collision resolution. This paper takes ideas from existing works (such as differentiable optimization, differentiable physics simulations), applies them to a new domain and employ a previously unused factorization method to arrive at an original contribution. Also as a positive note for such a practical contribution, the authors have committed to releasing the source code openly.  The paper is well written and organized. The concepts are exposed clearly and a good level of detail is provided. Nevertheless, the paper would probably benefit subtly by having a supplement with some extra details, such as: - The derivations mentioned but not written out in lines 136 and 163 - Full characterization of control task: what random initialization is performed? what are the specifics of the control network? are the reported results an average of N trials (or the best)? - Comparisons to other simulators (eg non differentiable ones), or to numerical methods (finite differences) - How are the interaction between the cloth simulation and the rigid bodies in the experimental scenes dealt with? Could this type of cloth simulation be easily integrated into broader (differentiable) physics simulations?  The experiments performed demonstrate convincingly the strengths of the proposed method in a variety of settings. As mentioned before, for the sake of completeness, I would be interested in also seeing a comparison of the proposed simulator with numerical differentiation, if feasible for the problem sizes. Also, given significant efficiency gains in this method, it would be interesting to see the comparison of the differentiable simulator to a regular one.  