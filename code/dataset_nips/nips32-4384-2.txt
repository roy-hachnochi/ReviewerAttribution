This work is original in its use of deep reinforcement learning and graph neural networks to learn novel search control heuristics for SAT solving. While the techniques used are not novel themselves, the application domain is. The authors do a good job of surveying related work in this area and situating their contributions in this landscape.  The paper is well-written and I found it very easy to follow the details of the proposed approach and the authors' results.  Technically, the work presented is solid, though I have a few comments/suggestions here. Firstly, while I take the authors' point about not trying to compete on solution time with state-of-the-art SLS solvers that have been engineered and fine-tuned for decades, I think it would be worth comparing the performance of their algorithm to that of survey propagation (SP). SP, besides being one of the strongest SLS solvers on random 3-SAT, actually uses a message-passing approach as well -- and thus would make for a particularly interesting comparison with the authors' GNN-based algorithm.  I laud the authors' direct and honest consideration of the strengths and drawbacks of their approach. I appreciate that they embrace the scientific interest of this work (over simply trying to advance the state-of-the-art in solver performance). I don't think they should be coy about reporting other things that may be of interest to the broader community: for example, the solution time, the gap to SP etc. Such performance numbers, even if they compare unfavorably to WalkSAT or SP, would give the community an idea of what the current gap is, and a way to measure future progress in this direction.  Generalization from rand_3 (lines 287--297): interestingly, my intuition reading this section was the exact opposite! My feeling is that a heuristic that works well in formulas with no structure would *not* translate well to domains with structure -- indeed, the SAT contests traditionally have three "tracks" for this reason: random instances, "crafted" instances (like the graph problems), and industrial instances that come from applications. I would consider reframing this discussion.  Table 4 raises an intriguing question: how does this divide in performance between WalkSAT and the GNN approach grow as the problem size increases? For example, it may be that the GNN+SLS combination zooms in faster on the solution, so you might even beat WalkSAT on time for large enough instances, where WalkSAT's meandering may lead to long runtimes.  Finally, a couple of minor comments:   - The caption for figure 3 could be clearer (which curve is which?)   - Table 4: are we only looking at flips that are recommended by the heuristic,     or are random flips included as well? 