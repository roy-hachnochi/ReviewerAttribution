--------------- Update after reading Author Feedback ------------- I am updating my score to a 6 based on the author feedback.  My main concern previously was that the method could only be applied to distributions with equal number of points and uniform weights. In the rebuttal, the authors have shown that the method can be applied to general  distributions. My remaining concern is that the algorithm only applies when a Monge map exists which is still a strong restriction that does not cover several applications in registration/partial Procrustes matching.   Conditioned on the authors clarifying this in the text, I believe this paper should be accepted. ------------------------------------------------------------------------------ Summary: The authors propose an approximation to the optimal transport problem based on projection pursuit. The algorithm has fast convergence properties compared to similar approaches (for instance, sliced Wasserstein distances) and is easy to implement.  Comments: My main concern is that the approach presented in this paper might not be very useful. From what I understand, Algorithm 2 estimates a Monge map between the two distributions. For finite distributions, Monge maps only exist under very restrictive assumptions. It seems that for the algorithm to work, it requires that the initial distributions both be empirical distributions supported on the same number of points.  This effectively reduces the problem of computing optimal transport distances between the two distributions to one of computing a minimum cost perfect matching for which efficient (approximate or exact) algorithms already exist.  Can this approach be extended to measures p_X and p_Y where X and Y have different cardinalities or where the distributions are not uniform?  Beyond this question, I have a few minor comments:  The equation between 97 and 98 equates the optimal Monge map to the Kantorovich optimal plan. These are not necessarily equivalent. A Monge map may not exist in many cases.  Can you give wall time comparisons for Figure 3? If given the same time budget, how do the two compare? This would be easier to read than Table 1.  Is it possible to compare with fast transport solvers, such as the one here: https://github.com/nbonneel/network_simplex In the particular case presented in the paper, comparing to standard perfect matching algorithms would be useful.  How does your work relate to the following paper: Paty and Cuturi, "Subspace Robust Wasserstein Distances"  In line 166 you mention the computational cost of the method. What is the memory cost?  In line 177 you assume that E[X] = E[Y] = 0. I understand that you can assume either X or Y is centered without loss of generality. Why can you assume that both are distributions centered at 0? 