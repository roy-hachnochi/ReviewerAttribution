The authors present an adaptation of Graph Neural Networks which learns node representations on Riemannian manifolds-- and more precisely, hyperbolic spaces, which have negative curvature. The underlying motivation for this approach arises from the recent successes of Geometric deep learning and the use of hyperbolic spaces for embedding learning in a variety of applications. In this paper, the authors describe the manifold that they embed their representations into (Poincarre and Lorentz), detail the corresponding updates, and show the performance of their algorithm for general graph classification tasks on one synthetic experiment and two concrete applications.  These experiments seem to highlight the benefits of learning non-Euclidean representations of the data, whose geometry seems more suitable to capture fundamental properties of the data, such as clustering or hierarchies, especially in low-dimensional settings. The paper is clearly written and easy to follow. The experiments are rather well described--although some key details are very blurry, and seeing the actual code might have lifted some shadow areas--, and the “sanity-check” experiments provided in the supplementary material provide a sound basis for the authors' discussion.  The discussion around this submission can be organized along the following axes:  (1) From the novelty perspective, this paper is extremely reminiscent of the work by Gulcehre et al (ICLR 2019)[1]--although it is not cited here. Indeed, in their ICLR 2019 paper, Gulcehre et al propose to learn hyperbolic embeddings for Graph Neural Attentions mechanisms: their goal is to learn relationships in graphs. Attention weights are defined as distances in hyperbolic spaces, and the message passing updates are defined by taking the Einstein midpoint. This message-passing process yields representations of the nodes that can then be used for any downstream ML task.  The main difference with the current paper lies in this message-passing step: in this current submission, learnable operations are performed in the Manifold's tangent space—which is Euclidean, so brings us back to a familiar setting where we can perform linear and learnable operations-- rather than the manifold itself. As such, the messages are less “guided”, since they do not use the Einstein midpoint, but rely on using successively using the manifold’s exponential and logarithmic maps to go to and fro the Euclidean and hyperbolic spaces.  This is a new and interesting viewpoint. It would be interesting to dig deeper into what this entails from a theoretical perspective, especially since the tangent space here is always taken with respect to the origin… How does this affect the results? The paper might thus benefit from highlighting further this difference with this competing hyperbolic method, but it seems that the mechanism itself still remains sufficiently novel. (2) Another interesting contribution is the authors's use of these embeddings for node-wise and graph-wise classification tasks. To adapt regression and classification methods to handle their hyperbolic embeddings, the authors introduce a set of centroids that act as landmarks and summarize the structure of the graph's embeddings: each node is characterized in Euclidean space by the distance of its embedding to the centroids (where I assume the distance is the hyperbolic one-- in which case, what does the term "centroid" mean? Is landmark a more correct characterization? Or are these actual centroids, in which case, which definition of "mean" or center is used? The paper would also perhaps benefit from detailing how these centroids are selected: are they fixed? Are they random? Do they change for each graph?).  The assumption though is that the hyperbolic distances with respect to those fixed manifold landmarks characterize better the density of the data than distances between vanilla Euclidean embeddings, and as such, will be serve as better data input… However, this places the method somehow on-par with other "similarity-learning" methods. As such, for a more thorough understanding of the authors' method, this classification task should perhaps be compared with other such methods: in the case of node-identified graphs for instance, one could use the WL kernel to compute similarities between nodes, and taking a set of fixed nodes as "centroids", perform classification similarly as in this paper... (3) From the experiments perspective: the experiments might be a little weak to show clearly the benefits of using such hyperbolic methods in light of other methods: a. For the synthetic experiments: the experiments seem to indicate the superiority of HGNN compared to Vanilla GNNs. However, the task itself might be very simple, and easily achievable with non-neural network based methods. For instance, in the 3 dimensional setting, are simple statistics (like the mean, standard deviation, and max degree over the graph--all of these perhaps normalized by the number of nodes) sufficient to represent the graph and achieve good classification performance? If this simple method performs as well as HGNN or any message-passing based method, then why learn such a complicated model when logistic regression on vanilla features could suffice? b. Similarly, for the Molecule dataset, the authors choose to compare their method with other “state-of-the-art” deep learning competitors. However, Weisfeiler-Leman kernels have proven extremely accurate on molecule prediction tasks, so yet again, it remains to show that neural network based models (hyperbolic or not) are significantly better than other methods… (see [2] for instance). Moreover, in table 3, it seems that the authors have used the high dimensional version of the hyperbolic space to compare with other SOTA approaches… What were the dimensions used in competing methods?   To sum up, the message-passing update mechanism proposed by the authors is a nice and interesting contribution which seems sufficiently novel to distinguish it from other hyperbolic graph neural network methods already proposed in the literature. Perhaps the main drawback of the paper is a lack of definite direction, neither emphasizing the theoretical novelty of the method nor providing extensive experiments to justify it: while the results presented by the authors would make it interesting to dig deeper in the theory behind these updates, the experiments might still be a little lacking, as they focus on only showing the hyperbolic embeddings success with respect to other neural-network-based methods, not withstanding the rich literature on non-DL based methods for the same task. It would also be beneficial to see the performance of their method on a wider number of tasks and dataset.  [1] __HYPERBOLIC ATTENTION NETWORKS__, Caglar Gulcehre, Misha Denil, Mateusz Malinowski, Ali Razavi, Razvan Pascanu, Karl Moritz Hermann, Peter Battaglia, Victor Bapst, David Raposo, Adam Santoro, Nando de Freitas [2]__ Weisfeiler and Leman Go Neural: Higher-order Graph Neural Networks__, Christopher Morris, Martin Ritzert, Matthias Fey, William L. Hamilton, Jan Eric Lenssen, Gaurav Rattan, Martin Grohe 