This paper introduces a new bandit problem where the goal is to find the largest gap between any two adjacent arms. It is framed similarly as the best-arm identification problem in the sense that the goal of the player aims to identify the max gap between two adjacent arms using as less samples as possible. The authors provide a lower bound on sample complexity for that setting. They also propose elimination and UCB-like algorithms for which they provide sample complexity analysis matching the lower bound.  Strengths:  [Originality] * The tackled setting is a new problem. * The algorithms are based on known bandit-strategies, but their application for solving the problem is new.  [Quality] * The authors provide a lower bound on sample complexity for their new setting and matching upper bounds for the proposed algorithms. * The simulated experiment is useful for showing the sample complexity improvement of proposed algorithms compared with uniform sampling.  [Clarity] * The authors provide a lot of intuition on their theoretical results, along with examples to understand their definitions and proofs.  [Significance] * It is interesting how the authors transform the confidence intervals on arm means into confidence intervals on arm gaps. These theoretical perspectives (and Alg. 4) could be useful in other problems.  Weaknesses:  [Clarity] * What is the value of the c constant (MaxGapUCB algorithm) used in experiments? How was it determined? How does it impact the performance of MaxGapUCB? * The experiment results could be discussed more. For example, should we conclude from the Streetview experiment that MaxGapTop2UCB is better than the other ones?  [Significance] * The real-world applications of this new problem setting are not clear. The authors mention applicability to sorting/ranking. It seems like this would require a recursive application of proposed algorithms to recover partial ordering. However, the procedure to find the upper bounds on gaps (Alg. 4) has complexity K^2, where K is the number of arms. How would that translate in computational complexity when solving a ranking problem?  Minor details: * T_a(t) is used in Section 3.1, but only defined in Section 4. * The placement of Figure 2 is confusing. --------------------------------------------------------------------------- I have read the rebuttal. Though the theoretical contribution seems rather low given existing work on pure exploration, the authors have convinced me of the potential impacts of this work.