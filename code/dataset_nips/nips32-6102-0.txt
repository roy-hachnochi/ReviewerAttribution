I thank the authors for the their clear response which solidified my view that this is a good contribution to NeurIPS In future work, I think it would be worth it to not only compare their method to normal coreset approaches but also to cheap-and-basic variational approximations like the Laplace approximation, if only to show me that I am wrong in suggesting that this could provide an alternative  Best  -----------------------------------------  The author(s) tackle the problem of Bayesian inference on large datasets. Coresets provide one approach to such solutions: simply sub-sample and reweight in a clever fashion the data so that inference on the sub-sampled data is almost the same as inference on the full dataset. They propose a variational inference approach which naturally builds a coreset-type approximation of the posterior. More precisely, they observe that the posterior is always in a (very high-dimensional) exponential family, with sufficient statistics the log-prior and the log-likelihoods of each datapoint. Thus, choosing an approximation which reweights each log-likelihood corresponds to seeking an approximation inside an exponential family, thus yielding computational tractability of the variational optimization of the KL divergence. In contrast, existing methods instead use Hilbert distances between the log-likelihoods. Their algorithm iteratively constructs a subset of the data by iterating the following two steps: 1. Select a new point to add to the subset. This is achieved by finding the minimizer among a random subset of the remaining datapoints of a stochastic approximation of the gradient of the KL divergence against the weights. 2. Recompute the weights of the log-likelihoods for all datapoints in the active subset. They propose a theoretical analysis of their algorithm and show that the exact version (no stochastic approximation of the gradient and no subsetting of the data in step 1 above) as a geometric approximation (Prop.1 and 2, line 200-208). They perform two tests of their method. The first is done on a Gaussian example, yielding closed-form updates. Their method is very good in this situation. The second is done on logistic and Poisson regression. This second comparison appears inconclusive to me and could be highly misleading due to the fact that it mixes together six different datasets. It is unclear to me whether the situation considered in this second experiment would be highly favorable to their method or whether it represents an honest test.   I believe that this article is a strong accept but I am not completely certain in this opinion, due to my review time being limited.   While the system flagged this submission as potentially similar to submission 1914, I am confident that there is zero overlap between the two submissions.    Major remarks: - The algorithm has two stochastic steps: we’re sampling from the current approximation of the posterior, and we’re sub-sampling the potentials that we are willing to examine at each step. It would be useful to discuss the influence of the number of samples from the posterior-approximation and number of potentials on the precision of the algorithm. How should I choose these values in practice? What are their impact? Am I correct in stating that the guarantees of the algorithm only hold on the version of the algorithm which does not sub-sample the potentials and which examines all of them? - I have not understood where you discuss the impact of the speed parameter \gamma_t which appears in algorithm 1. Can you please discuss further how you choose its value and how its impact is felt? -       Fig.2 does not feel very informative due to the fact that it mixes so many different sub-experiments. - This is more of a direction for future work, but one thing I’m curious about is how this method compares to Laplace approximations. In a large dataset, the Laplace approximation of the posterior distribution should be decent and should be easy to compute (or possibly at least easier to compute than the method you propose here).  No minor remarks   