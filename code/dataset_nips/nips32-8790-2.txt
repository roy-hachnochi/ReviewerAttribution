Originality: The method is definitely new and previous work that attempted to do verification on rotation attacks is discussed.  Quality: -> The method described is technically sound. The only caveat that I have is with regards to the scalability. Unless I'm mistaken, this requires to, for each split of the hyperparameter, for each pixel, solve a LP using Gurobi to obtain the linear bound candidates, and then perform the Branch and Bound lipshitz optimization to get the offset, which seems extremely expensive. What do the runtime in Table 3 correspond to? Mean verification time for an image? Just the time to derive the linear bounds? Time to derive the linear bounds for 1 pixel?  -> With regards to evaluating the performance, the method compares very favourably to previous techniques (interval analysis) which are pretty inadapted to the task. This shows why the method proposed is interesting but it would also be beneficial to get an estimate of the limitation of the method. One ideal way would be to get some upper bounds on the verifiability that can be achieved, maybe as the result from some geometrical adversarial attacks?  Clarity: The methods is described sufficiently well that it would be possible for a motivated reader to reproduce the results.   Significance: The improvement proposed in this paper is of interest because while a significant amount of progress was made in bounding the outputs of Neural Networks given initial constraints, there hasn't been as much work in describing how to encode richer properties beyond linear constraints or norm-limited perturbations.   Also, some more local comments that I had at various places:  L.87, paragraph "Geometric Image transformations" I don't understand the motivation for assuming that all the pixels are first perturbed by a small L-inf noise. If the robustness of interest is against rotation, what is the point of including also robustness to small perturbation?  L.140, Eq 5, Eq 6.  V has not been introduced.  L.155 to 159: This paragraph exactly describes the process of Branch-and-Bound, which is extremely standard in optimization. This might be good to at least point the connection for the benefits of the readers.  More generally, on the subject of this Branch and Bound procedure, the method proposed here is to run a branch and bound type method to obtain the offset to add to the linear constraint such that it is sound. Once this offset has been computed, it's not entirely sure that the bound on the intensity will be good enough to guarantee robustness. Would there be some benefits in just using a looser bound for the nu_l offset (essentially skipping the branching at that stage to save computation) but instead doing branching at a higher level so as to refine the splits on the possible parameters if the full verification (using DeepPoly) isn't tight enough? This would have the added benefits to make things significantly tighter (imagine in Figure 3 being able to introduce a split at pi/8, this additional split would massively reduce the volume of the overapproximation)  l.223. typo "verifer"  [Updated review]  I read the comments by the other reviewers, as well as the rebuttal by the author. At the moment, my opinions are as follows: -> The scalabilty of the network is in line with usual formal verification of NN work. -> According to their comment (l.37 rebuttal), given enough computational budgets (I hope they would put the time it took but I can imagine a reasonable estimate) they can actually perform verification quite well (the bounds are not ridiculously loose) -> I'm satisfied with the explanation given by the authors with regards to their decision to get as tight as possible bounds before passing along to the verifiers, due to the difference in runtime of the two components of the pipelines. I think that the paper is interesting and in my experience, the problem they tackle is one that regularly comes up in discussion with people interested in formal verification of NN, so there would definitely be interest by the community once published.  I'm raising my score as both my question have been adressed 