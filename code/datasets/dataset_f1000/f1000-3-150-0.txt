 The article describes these technical challenges, faced by the authors when porting the PanGIA plugin from Cytoscape 2 to Cytoscape 3: The new data model is very different from the one in Cytoscape 2. Tasks that need to display messages on the GUI are not guaranteed to run on the EDT on Cytoscape 3, so the developer has now to explicitly ensure that in order to avoid deadlocks. The authors had to add a new randomization control feature to the old and the new version of PanGIA, so the output of both versions can produce the same results. The paper also provides overviews of how to run PanGIA and the meaning of the networks it produces. The article is consistent, well written and provides useful technical information for developers who want to port a Cytoscape 2 plugin to a Cytoscape app. I have only one minor concern: I totally agree that " Cytoscapes powerful and flexible data model is not always intuitive at first , but the code snippet that exemplifies the use of the new data model is a bit longer than necessary, especially if the main goal is to compare it with the other code snippet, which shows how Cytoscape 2 data model is typically used. It would be fairer to use an example that only deals with the data model, and not network or node creation, because: (a) the Cytoscape 2 code snippet does not show network/node creation; (b) network/node creation is not necessary every time data is added, so the given example looks more complicated than it actually is. I think a more equivalent example would be something like this: public void addDataToTable(CyNetwork network, CyNode node, Class type, T data) { //Get node table. CyTable table = network.getDefaultNodeTable(); //Create the column in the table object. if (table.getColumn("MyColumn") == null) table.createColumn("MyColumn", type, false); //Most commonly, data for the node is //added using the network object, not the table object. network.getRow(node).set("MyColumn", data); } 