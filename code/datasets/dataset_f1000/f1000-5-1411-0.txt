The software tool article 'ddpcr: an R package and web application for analysis of droplet digital PCR data' is well-written and includes sufficient detail for the reader to assess the tool's construction, implementation and outputs. The ddpcr R package (v1.5) functions well and includes clearly-written, detailed vignettes to support the user and understand what is happening 'under the hood'. In addition, the source code is openly available on GitHub, which allows advanced R users to investigate details of the implementation. In general, we recommended more explicit links in the paper to supporting vignettes and the package README. In addition to ddpcr being a useful tool for standard data science steps (get data, visualize data, analyze data), it also provides the ddPCR community with a well-documented, new analytical methodology for ddpcr clustering and hence opportunities for assessing robustness around clustering techniques in general in this field. This contribution could be made more clear in the Introduction and/or Motivation sections. Figure 5--referenced multiple times in the Introduction--could be moved alongside the text for the reader. The Methods structure could be arranged to follow standard data science steps and Figure 3: (1) get data [raw, export, csv] (2) import data [new_plate()] (3)analyze data [analyze()]. There is no section on (4) visualize data [plot()], and the likely user cycle of analyze-visualize-change analysis parameters-analyze-visualize. With clustering, I am guessing this will be a common and important set of repeat steps. I would end the section with the example workflow code to reinforce the steps. The Analysis sub-section might benefit from some supporting references for the selected analyses (e.g. kernel density estimation, Gaussian mixture models), url links to the ddpcr::analysis vignette in GitHub, and if the paper word-limit allowed, a bit more detail in the paper itself, especially for the 'assign droplets into clusters' step. The examples show rain being identified in the FAM (empty vs filled; vertical direction), but not between FAM+ and FAM+HEX+ (mutant vs wildtype; horizontal direction). Is this because the algorithm doesn't allow for this, or because all of the droplets in that range could be classified as FAM+ or FAM+HEX+? Also in the Analysis sub-section, a description of the next_step() function would be useful for those who want to understand each step in the process. A potential enhancement to the package would be a plot function/method for each step that visually displays the results of each step in the analysis. It might be useful to synchronize the language used to describe the clusters with the attribute language in output objects in the package. For example, in the paper and vignettes clusters are "double positive, FAM+, HEX+, or double negative". In clusters() the clusters are POSITIVE NEGATIVE RAIN EMPTY etc. The plate_data function outputs clusters as numbers 1 through 7. The plate_meta function outputs clusters as mutant_num and wildtype_num. With a bit of sleuthing it is clear you can define the resulting cluster names with new_plate(), which is useful but may not be intuitive for many users. Other minor suggestions for potential enhancements after a test drive of ddpcr: - Plotting: - an addition of a Legend for the plot() would be a very useful - show_grid_labels = TRUE as default? - visually distinguish rain from empty? Figure 5 in the paper shows this, but the plot generated by running the code in the 'Workflow' section does not. - The plate_meta data.frame in a ddpcr_plate object could be a tibble for better printing - The plate_meta data.frame (after analysis) could also display the rain count