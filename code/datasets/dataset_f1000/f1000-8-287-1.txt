The authors present a new version of the forgi software, a python library to analyze the tertiary structure of secondary structure elements in RNA. It takes as input almost any format of 2D or 3D information. This manuscript describes a new method for easily obtaining the angles and stacking patterns in a multi-branched loop and a pseudoknot/kissing hairpin. The authors validate their results by testing the software on known pseudo-knots and junctions, and obtain results that are consistent with the state-of-the-art knowledge of RNA local structure organization. The authors highlight significant improvements compared to previously published packages and specifically all-atom based methods. For instance, a deviation from coaxiality is very common but can be easily missed if a manual inspection is performed without doing computations. The software is clearly presented, well-validated, freely available and open source. The results presented are significant and the tool will be very useful to the RNA bioinformatics community. Although, this manuscript does not discuss extensively the analysis of the results, the latter is included in the first author’s thesis, and freely accessible as further reading. ` Minor remarks Page 4: ‘’with and without missing residues’’, it is easy to imagine how the graph without the missing residue is, but how are the ‘’missing residues’’ added? (i.e. are you inferring which residues are missing, and if yes, how?) Page 5: The authors mention a ‘’cleaned version’’ of the PDB. Is the only ‘’cleaning’’ performed is the conversion of the residue names? Page 5: It would be helpful to clarify what is a ‘’simplified example’’ of the code? What sort of simplification was applied to it? Is the real code significantly more complicated to use than the example? If it is not, the authors might want to consider rewording this as it appears to undermine the real simplicity of use of forgi (which is very user friendly). 