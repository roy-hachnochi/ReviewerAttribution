Kaleb et al. present two packages, namely R/Bioconductor OmoDB and python omadb, that allow users to query and use data from the Orthologous Matrix database. The article is well written and the authors provide 6 examples that convincingly demonstrate the usefulness and reach of their work. I have a couple of comments and suggestions below, presented in chronological order. The only serious one is a request for the authors to describe the outputs in their examples a bit more (see below for details), to facilitate the adoption for users that wouldn't be familiar with R. In https://omabrowser.org/api/docs, the pagination example has a typo. The genomes should be replaced with genome: ``` $ "https://omabrowser.org/api/genomes/?page=2" HTTP/1.1 404 Not Found Server: nginx Date: Mon, 11 Feb 2019 06:04:30 GMT Content-Type: text/html; charset=utf-8 Connection: keep-alive X-Frame-Options: SAMEORIGIN Vary: Cookie Set-Cookie: __utmmobile=d41d8cd98f00b204e9800998ecf8427e; expires=Wed, 10-Feb-2021 06:04:30 UTC; Path=/ Set-Cookie: sessionid=9zb42ljib7apkubml1e1t742i5p6f3a6; expires=Mon, 25-Feb-2019 06:04:30 GMT; HttpOnly; Max-Age=1209600; Path=/ $ curl -I "https://omabrowser.org/api/genome/?page=2" HTTP/1.1 200 OK Server: nginx Date: Mon, 11 Feb 2019 06:04:32 GMT Content-Type: application/json Connection: keep-alive Link: ; rel="first", ; rel="prev", ; rel="next", ; rel="last" X-Total-Count: 2198 Vary: Accept, Cookie Allow: GET, HEAD, OPTIONS X-Frame-Options: SAMEORIGIN Set-Cookie: __utmmobile=d41d8cd98f00b204e9800998ecf8427e; expires=Wed, 10-Feb-2021 06:04:32 UTC; Path=/ Set-Cookie: sessionid=9h5n3ouuwvh4ock9dz3q4yiprmb8iw0d; expires=Mon, 25-Feb-2019 06:04:32 GMT; HttpOnly; Max-Age=1209600; Path=/ Strict-Transport-Security: max-age=15768000 ``` In the introduction, the authors explain that 'Most data available through the OMA browser is now accessible via the API'. I think it would be useful to know what data isn't available and whether the browser and REST API would ever be equivalent in terms of data served. This might be partly addressed later, in the discussion, where the authors mention 'support for local synteny'. Some additional details would be useful to redirect users to the appropriate interface. Similarly, it would be useful to know if the R and python packages provide access to the same data, or if differences also exist there. I didn't see mention of the R and python packages on the OmaDB web page. This would be a useful addition for visitors. In the Bioconductor package section, the authors explain that data is provided in 'R friendly objects, namely S3 objects and data frames'. I would suggest to rephrase this and only refer to objects, as S4 objects are also returned and the nature of the technical class system is probably not necessary in the frame of this document. Regarding the R package, I would suggest to add URL and BugReports fields in the packages DESCRIPTION file. This helps users find the GitHub repository and report issues. I also noted that in the 'getting started' vignette, it looks like some section a missing a space after the section markup. I have send a pull request fixing these and some other minor issue. Note that the html and R version of the vignette shouldn't be included in the package source. In the python package section, the authors mention that this package is also named 'omadb'. I would argue that the packages have different names, as programming languages are case sensitive and suggest to drop the also to avoid any confusion. In the first sentence of the result section, authors should replace R library by R package, as they are referring to their package, not the location where the package is being installed (the library). In general, it would be very useful for the authors to describe the different outputs they have. I am not expecting the authors to provide full details of the REST API responses, but describing how the results match the text would be important. For example, in example 1, they only show how to produce the `response_content_list` response. Here, it would be useful to explain that this R list directly maps the REST json message, and point to the specific documentation entry point. Such an explanation motivates the example in the text and helps users, that aren't familiar with REST, to understand the relation between the server and the package. Similarly in example 2, the authors create the `seq_annotation` variable and mention that only one target sequence was identified. Here, it would be useful to show that `length(seq_annotation$targets)` is equal to 1, to back their claim, to indicate how users can verify the number of targets, and motivate the use of the first list index in later code chunks. Still in example 2, the authors query and extract the hog members. These data are however already present in the first output of that example, under `seq_annotation$targets[[1]]$oma_hog_members`. It would be useful to explain why the authors send a second query to obtain that data and clarify whether `oma_hog_members` is always equivalent to calling `getHOG` and `getProtein`. When trying to reproduce the code, I first failed to run the code chunks calling `getProtein`. Later, the authors clarify the software requirements in more details. It would however be useful to briefly mention, early on in the Results section, what version was used for the examples. In example 5, I would suggest to update to new function name, as `getAnnotations` is expected to be deprecated in the next release, especially as the new version of the package is anyway required for the `getProtein` function. ``` myAnnotations - getAnnotation(mysterySeq) Warning message: 'getAnnotation' is deprecated. Use 'annotateSequence' instead. See help("Deprecated") ``` Another example where an explanation of the output is important is example 5. The authors call `myAnnotation - getAnnotations(mysterySeq)` and then refer to 54 GO annotation results. In repeating their analysis, I obtain a data frame with 55 observations (see below). It is this unclear whether I have a different result, if one observation should be dropped, or if my output is completely wrong (was I even expecting a data frame?). ``` dim(myAnnotations) [1] 55 13 ``` In general, given the nature of the package, i.e. that it accesses an online repository that is (or can be) updated regularly, results may change, this also explaining why I may have different results. 