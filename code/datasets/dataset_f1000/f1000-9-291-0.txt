Paton and co-workers describe an open source Python program, GoodVibes, for the calculation of thermochemistry from quantum-chemical calculations. The program automates a lot of the tedious work needed to process the output files and to add correction terms. Importantly, it presents a reproducible workflow for extracting and visualizing energies of reaction paths. GoodVibes is now in its third version and has over the last few years become a standard tool for computational chemists both in academia and industry. Additional functionality in the latest version includes, for example, automated calculation of diastereo- and enantioselectivity, potential energy surface plotting, and including separate single point energies. This software tool article is, therefore, most welcome not only as a reference for the program but by providing more detail and references to the underlying theory as well as examples of how to use the program. In particular, the program implements many elements of good scientific software practice, such as using a Git repository with version control, a version release system, and continuous integration testing. The program is also easy to install via pip or conda. It would be good if the authors could be more explicit regarding the “multi-structural correction” that is “applied based on the number and energy of distinguishable conformers present for each species". Is this on by default, and what is the basis for distinguishing between unique conformers? Also, could you be more explicit regarding the symmetry detection and correction (“ssym” argument)? How does it detect the internal symmetries of the molecule? And why is it off by default, when it seems that most standard quantum chemistry codes ( e.g. Gaussian) include at least external symmetry by default? Also, the use of “solvent media corrections” in conjunction with an implicit solvent method is strongly discouraged in ref 18 (Harvey, Himo, Maseras), and it would be good to add a note on this caveat with the inexperienced user in mind. I think the program is very useful as is, but here are some suggested improvements: Make the program work as an importable Python module and not only as a standalone script. This is especially helpful when integrating it into automated (Python-based) workflows. Storing internal data in separate files ( e.g. csv) rather than in the Python source code may be more maintainable. Separate documentation on, e.g. , Read the Docs may be more accessible. Document Python code with docstrings in NumPy or Google style. Output of SVG or other vector graphics files for lossless figures. A quick way to support more quantum chemistry codes (at least on Linux or Mac) would be to support output from the UniMoVib program (https://github.com/zorkzou/UniMoVib). Minor correction: “Gibbs energy” - “Gibbs free energy” (page 3/9 and other examples) “a Python-based project” - “a Python-based program/tool” (page 3/9) “standard concentrations” - “standard state concentrations” (page 3/9) Addition: After reading the review by Dr. Pollice, I agree with him that the handling of the moment of inertia for Grimme's method is not correct. There is a reference implementation of his method which can be found in the xtb Github repository: https://github.com/grimme-lab/xtb . The "subroutine axis2" handles the calculation of the average moment of inertia. After correcting for this in the code, I think the authors should do an analysis of how large the error is for using the erroneous moment of inertia, e.g., as a function of molecular size as Dr. Pollice points out. 