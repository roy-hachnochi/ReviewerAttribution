Summary  This paper proposes to train multiple layers of gradient boosting decision trees. The training algorithm is based on target propagation. The idea is to backpropagate errors using functions trained to inverse layers. The potential of the approach for feature extraction is illustrated on a couple of artificial datasets and its predictive performance is compared against (single layer) boosting and neural networks on 3 datasets.  Evaluation  The idea of building multiple layers of gradient boosting models is interesting from an intellectual point of view. From a more practical point of view however, it's not so clear whether this is a good idea. Gradient boosting models are already very strong learners that obtain very good results in many applications. It is not clear that using multiple layers of this model will bring improvement in terms of expressive power. Overall, I think the approach lacks a clear motivation, beyond the rather artificial arguments given in the paper.  The training algorithm derived from target propagation makes sense, although I'm missing some discussion about the possibility to inverse gradient boosting models with another gradient boosting model. Is it feasible at all? Theorem 1 is potentially interesting but the requirement of isometry of the inverse function G seems very strong and needs to be discussed further.  The illustrations on synthetic data in Section 4.1 are interesting. Experiments in Sections 4.2 and 4.3 have several limitations however.   First, except for the number of layers, there is no analysis of the impact of the different method parameters. Two parameters that I think needs to be studied in depth are the number of boosting iterations (i.e., K1 and K2, whose values are not given in the paper) and the depth of these trees. Their influence should also be studied as a function of the number of layers. All experiments seem to have been performed with boosting models of depth 5. It's maybe already too high to see a benefit when stacking multiple layers of these models.  Second, the comparison with XGBoost and NN is not very informative. Hyper-parameters of XGBoost are fixed and chosen arbitraly. It's not clear that it can not be improved by tuning these hyperparameters. This is important if the authors wants to show the benefit of having multiple layers of GBDT. Keeping the same structure for both NN and mGBDT is unfair as NN use weaker (linear) models in their layers. Again, it's not clear that NN can not be improved easily by increasing the number of layers. Comparing also convergence of mGBDT and NN in terms of number of epochs does not seem appropriate. My guess is that one mGBDT epoch is much slower than one epoch of NN with backprop. So, I don't see the point of concluding from the experiments that mGBDT converges much faster than NN in terms of epoch. Computing times should be used instead on the x-axis of the plots in Figure 8.  Third, results in terms of predictive performance are actually disappointing. On the Income and Protein datasets, the accuracy of multi-layered GBDT is not better than the accuracy of XGBoost, suggesting that having more than 1 layer does not bring much. On the protein data, even with NN, having more than one layer does not really improve. This suggests that the chosen datasets are actually too simple to highlight the potential benefit of having multiple layers. Why not use large computer vision dataset? I understand that the proposed model can not compete with convolutional neural network but still, on such complex problems, showing the benefit of having multiple layers could be easier.   The paper is not very well written. There remain many typos, omitted words, ungrammatical sentences, or unsupported statements. The writing should be improved.  Minor comments: - The paper does not give clear credit to target propagation for the training algorithm. How is it similar/dissimilar to target propagation? - Page 5: "there are still numerous datasets of interests that are best suitable to be modeled by trees". What are these datasets? Please give references. - Theorem 1: "preserve the isometry of its neighbors". I don't understand this expression. What is "the isometry of its neighbors"?  Update after rebuttal: Thank you for your answer. I still believe that the effect of the parameters should have been studied more thoroughly. The argument that a default setting is used "to avoid a fine-tuned performance report" and "to show the robustness for mGBDTs" is not valid in my opinion. Despite what you claim, mGBDT is also not significantly better than XGBoost on the Income and Protein datasets. 0.8719 vs 0.8742 and 0.5937 vs 0.5948 (in this latter case with a standard deviation > 0.25) is not what I call an improvement. At the present stage, the experiments in the paper do not really show the practical interest of having multiple layers of GBDT.  