The paper provides an appealing approach to learning boolean rules: encode the problem as an IP and use column generation to cope with the large number of variables needed (in the given formulation). A nice aspect of this approach is that the desired trade-off between accuracy and complexity is explicitly represented. (Mostly) positive empirical results are presented.  The key issue, of course, is the complexity of the pricing problem. Here we do not get a theoretical result on this, but I suspect it is NP-hard. Instead we get empirical observations that (1) the pricing problem can get quite big and (2) thus not always solvable to optimality. Indeed for big problems the pricer can fail to return any negative reduced cost variables to add to the master problem. The authors deal with these problems in a reasonable way: resorting to approximate methods.  Since the authors are using CPLEX they can encode constraints (7) and (8) using CPLEX's "Logical AND" constraint. I strongly expect this to give better performance than "manually" encoding it using linear constraints as is presented here. This is because (I assume - and hope!) that CPLEX will have specialised propagation for logical AND constraints.  One could argue that this paper is "too easy": the authors encode the problem as an IP with CG and get CPLEX to do most of the hard work. But, really, this very easiness is the point.  I think the authors are clear that further work is needed to get the most out of this technique which is true and good to see explicitly stated.  The paper is well-written and I found no typos (which is unusual). One small point: an overall time limit of 300 seconds seems low. If I were, say, a bank wanting a comprehensible rule set for fraud detection I would happily wait a few days to get it.  AFTER DISCUSSION AND FEEDBACK  I have bumped up my rating a notch. Nice work. 