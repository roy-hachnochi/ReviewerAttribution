Large batch sizes have only received attention recently (with most papers published in 2018), motivated by GPU parallelization and the observation that increasing the batch size may work as well or better than decreasing the step size. Observations are still contradictory, but this paper represents the best attempt so far to bring some clarity to a very messy situation.  This paper is superbly written with extensive experiments. The main limit to clarity is the authors desire to be as complete as possible (constantly sending the reader to figures which are in the appendix, and whose captions are unsufficiently explanatory) and overcautious in drawing conclusions from their experiments. Its density may make it hard to access for readers who are not yet familiarized with the problem.   This paper observes, through extensive experiments on 2 datasets, that models trained with large batch sizes, even when their test performance is comparable (or slightly inferior) to models trained with smaller batches, and considerably more sensitive to adversarial attacks at test time. However, if adversarial noise is added at train time, performance with large batch size can be kept high, and maybe even become better than smaller batches. The authors only have some preliminary result for this (in the appendix!), and are not providing a ‘large batch’ recipe yet.  The main technical contribution is in how adversarial perturbation techniques (5 of them are covered in this paper) enable to control the sharpness of the Hessian (measured with the eigenvalues). Does the noise need to be adversarial in practice? I am not sure as this is quite expensive, and random noise may also work (see below), but this brings a level of understanding and analytical consistency that makes the study worth the trouble. I especially like theorem 1, and how it shows that adversarial training should provable tame the Hessian sharpness (though it is not well placed in context)  The reviewer has found that very large batch sizes is critical for performance on noisy data (a similar results was just published in https://arxiv.org/pdf/1705.10694.pdf), which suggests that the noise could also be random rather than adversarial, and that the 2 strategy should be compared.   I failed to understand figure 5:  - why is the x-axis varying beyond[0,1] if  it represents lambda - what data is the cross-entropy computed over: non-adversarial as the original model seems to have a lower loss - what does the curvature mean? - how can you average over deep models? It usually does not work unless on is just a small perturbation of the other? 