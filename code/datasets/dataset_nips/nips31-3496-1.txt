Summary  The setting of this paper is the Online Convex Optimization setting, in which a forecaster is to predict a vector from a convex set and the goal is to minimize the average risk w.r.t. some oracle parameters. This paper develops O(dT) runtime algorithms that achieve an average risk with fast and slow rates (depending on properties of the loss function) that scale with the sparsity of the oracle. The approach is to discretize the L_1 ball and learn the optimal parameters in the discretization of the L_1 ball using squint with a discrete prior / boa. This yields a quantile bound on the average risk for the discretized set. Then, using a new pseudo-metric called "averaging accelerability" the risk for the L_1 ball is split into two parts: the risk for the discretized set plus the averaging accelerability times O(log(cardinality discretized set)/sqrt{T})). Now, depending on the discretization and the loss functions this yield rates ranging from O(1/\sqr{T}) to O(1/T). The authors provide two ways of adaptively learning the discretization depending on whether the data are i.i.d. or adversarial, which leads to two new algorithms, SABOA and BOA+. The approach is to restart squint/boa every time the discretized set is updated. The discretized set is updated in such a manner that it  approaches the set of minimizers, which leads to a small averaging accelerability.    Strengths and weaknesses  This paper is well written and clearly identifies the core technical ideas required to arrive at the main results. The build-up of the ideas going from squint/boa on a discretized set to averaging accelerability to learning the discretized set gradually guides the reader through the ideas used to derive the results in this paper. However, the proofs of the  main results can be quite laborious.   I quite liked the new averaging accelerability pseudo-metric and how it ties in with the analysis. It appears to be a useful new notion to measure the distance between the discretized set and the oracle for sparse oracles.   The fact that SABOA and BOA+ achieve fast rates for sparse oracles while maintaining a O(dT) runtime is interesting as thus far only non-efficient procedures were able to achieve this.      Minor comments  - footnote 3 has disappeared.  - there dot at the end of algorithm 1 falls on next line - proposition 1 appears to be missing the probability statement - line 150: evaluated thanks to a loss function -> evaluated by a loss function - line 173: I can not make sense of "one has to add in the grid of experts some points of the l_1-ball to the 2d corners - line 267: "Bernstein condition: it exists \alpha' > 0" it exists should be changed so that this makes sense - line 488: V_k/a -> V_k/a_k - line 526: I believe one still needs to apply Jensen's inequality to conclude the proof   