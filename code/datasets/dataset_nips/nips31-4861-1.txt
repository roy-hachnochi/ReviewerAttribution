======== review after reading the author response Most of my concerns have been reasonably addressed in the author response. The authors also have also provided the requested results of smaller NAO models, which are slightly worse than the SOTA but IMO are sufficient to demonstrate that the proposed method is promising. I've raised my score to the positive side.  Btw, I disagree with the authors' point that there's no need to report the performance of random search. It would be informative to report the random search results under the same computation budget as NAO, as it could help verify that the performance gain primarily comes from the algorithm itself rather than some other design choices of the search space/training setup.  ======== original review The paper proposed a new architecture search method by encoding the discrete architectures into a continuous vector space, conducting optimization there and then mapping the architecture embeddings back to the discrete space via a decoder. Experiments on both CIFAR and PTB show either improved efficiency or performance over existing methods.   Pros: 1. The paper is well written and technically sound. 2. The proposed method is interesting and appears to be very different from existing approaches based on RL and evolution. 3. Results on CIFAR-10 and PTB seem promising. Itâ€™s also good to see that the algorithm can handle both convolutional and recurrent cells.   Cons:  1. I'm not sure if the authors have fully circumvented the discrete space as they claimed. While the optimization for the architecture embedding is carried out in the continuous space, training the decoder requires learning to represent a discrete set which can be combinatorially large. In fact, one may also view the hidden units in the NAS policy network/controller as continuous representations, and the performance predictor proposed in the paper is therefore analogous to the value network which is more or less standard in RL. 2. The search space used in the paper seems substantially smaller than that of AmoebaNet/NASNet. In particular, there were 19 candidate ops in regularized evolution (Real et al., 2018) whereas the authors only used a small subset of 4 candidate ops. This could potentially make the efficiency comparison unfair.  3. The authors did not report the variance of their models. This could be important as the variance (especially on CIFAR-10) for training the same model could be even larger than the current advantage of NAO over other baselines .  Other questions: 1. How did you determine the trade-off hyperparameters in eq. (1) (specified in L199 and L266)? This seems nontrivial as each run of the algorithm would already require 800 GPU days using P100s. 2. How important it is to have the symmetric regularization term (L138-145)? 3. The current best NAO models are quite large. Can you make their sizes comparable with ENAS/PNAS (by using smaller F) and report their performance? 