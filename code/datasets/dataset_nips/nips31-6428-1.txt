This paper takes part in this rather recent (renewed would be more exact) attempt to solve combinatorial optimization (CO) problems with (deep) reinforcement learning. Here, the authors build on previous works to provide a novel, quite simple, approach to solve the vehicle routing problem (VRP). VRP is a quiet complex CO problem, much more complex than TSP and Knapsack problems. There are many variants of the VRP. Here, the authors deal with the one in which a single vehicle of limited capacity has to deliver items to a set of geographically distributed customers, each with finite demand.  The general idea is to train a reinforcement learner to solve any VRP instance drawn from a certain distribution.  Overall I find this paper well written and rather clear. However, I don't completely understand whether training depends on the number of delivery locations or not. The experiments are quite convincing. They compare their approach with algorithms like Clarke-Wright that can be considered as a baseline, sweep heuristics (this one deserves explanation or a bibliographical reference), and Google's OR-tools. The proposed approach obtains the best performance along with Google OR-Tools on small VRP instances (10 and 20 delivery locations). For larger instances, the proposed approach is often the best, though OR-Tools is a strong competitor. Regarding computation times, I find figure 4 quite unclear but I feel like OR-Tools is also faster than the proposed approach. However, it seems that its computation time scales faster than for the proposed RL one. But I really don't find the figure clear nor informative: with simple numbers, what are the wall clock times for both approaches. Minor remark: regarding figure 4, I doubt the figures mentioned on the ordinate axis are logs (though the scale is logarithmic).  The code is not provided. Reproducing the results is quite unlikely to succeed without further details.  Overall, I find this paper an interesting and significant contribution to the state of the art. I am not sure that it contributed to the state of the art on the VRP; this is a point that would deserve to be clarified: are we making progress towards solving VRP with RL for real applications, or is there yet a significant gap between the state-of-the-art algorithms to solve VRP and a learning approach? 