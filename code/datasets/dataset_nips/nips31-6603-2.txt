This paper studies machine learning techniques to learn heuristics that help guide SMT solvers (in particular Z3) to speed up finding solutions. The problem of finding a strategy for solving an SMT formula is formulated as a reinforcement learning problem where the cost function is (essentially) runtime. The research is well executed and shows taste in the problem setup and choice of solution techniques (in particular, employing a combination of Imitation Learning with a Neural Network policy, MCTS and Decision Trees).  This kind of research seems very promising in improving SMT solvers in the future. I'd also love to see a full fletched reinforcement learning algorithm like PPO employed here, which could lead to further improvements.  The paper is well written and understandable. Two points to consider:  - I very much encourage the authors to publish the code to reproduce their experiments. In fact it would be considered a serious drawback if the code was not released. This is the kind of paper that is very hard to reproduce without code because many details need to be gotten right. Even   - In terms of possible improvements, I would like to see a short discussion on the influence of neural network evaluation time on the speedups. If I understand correctly, speed was measured in inference operations per second and thus does not account for the neural network evaluations. How would the picture change if the NN evaluations would be taken into account?  If these two points were addressed in a convincing way, I would consider bumping my review score from "6" to "7".  After reading the author feedback, I adapt my review score to 7 and hope the paper will be published. Great job!  