       This paper presents a neural-guided approach for input-output program synthesis problems, which is a trending problem in the neural program       synthesis community. The main idea is to incorporate constraint logic programming during synthesis, and employ neural networks to rank the       different constraints during the unfold procedure when searching for a desired program satifying input-output examples.        The proposed approach is sound to me. I'm in between 5 and 6. My main concern is that the proposed approach is mainly compared against        previous works in the PL community, and may neglect several advancements from the neural program synthesis literature in recent years. For        example, [1] deals a similar program space using a sampling approach. [2, 3] provides the neural program synthesis approaches for the FlashFill        task, which is quite similar to the string manipulation task evaluated in this paper. [4] proposes a reinforcement learning-based approach to        guide synthesizing a mixture of differentiable and non-differentiable programs, which is related to the approach of this work, though might       not be directly comparable.        After reading the rebuttal, I think it contains decent results, which should be included in the final version. So I raise my rating.        [1] Ellis et al. Sampling for Bayesian Program Learning. NIPS 2016       [2] Delvin et al. Robustfill: Neural program learning under noisy I/O. ICML 2017       [3] Parisotto et al. Neuro-symbolic program synthesis. ICLR 2017       [4] Chen et al. Toward Synthesizing Complex Programs from Input-Output Examples. ICLR 2018       