Originality: The concrete approach seems to be rather novel; according to the authors, it is based on recent progress in automatic differentiation for matrix calculus [36]. Mathematical modelling languages, of course, have existed for a long time. GENO seems to be more convenient than e.g. CVXPY (problem dimensions need not be specified), and also more widely applicable (the problem need not be convex, in which case a local optimum is simply determined).  Quality: The approach seems technically sound. The manuscript describes some of the theory developed to support the approach. Experiments confirm that the approach works in practice.  Clarity: The manuscript is rather well-written and easy-to-understand. As an exception, Figure 1, as well as the accompanying description, left me clueless without visiting https://scikit-learn.org/stable/auto_examples/linear_model/plot_logistic_path.html, where the diagram is described in more detail. I also have a concern that's unrelated to the manuscript itself, but still concerns clarity: The authors indicate in the reproducibility response that their submission includes "A link to a downloadable source code, with specification of all dependencies, including external libraries.". However, the manuscript only provides a link to a website that allows one to *invoke* GENO, that is, to generate code for a user-specified optimization problem. The source code of GENO itself is not available to reviewers, or at least I could not find it. I would find access to GENO's source code useful in order to assess quality and significance of the submission.  Significance: I am not fully convinced of the significance of this submission. From my point of view, GENO is lacking the following capabilities in order to really be chosen over specialized solvers: 1. It would need to properly understand and exploit convex duality, to automatically solve a problem either in primal or dual form, depending on which form is more amenable. This, in turn, depends on the problem dimensions, which are not specified by the user. 2. It cannot currently handle the complex training objective functions arising from structured prediction problems. These often include an "inference" sub-problem that needs to be solved repeatedly as part of the overall optimization; or, in some cases, the sub-problem can be "moved" into the overall objective through appropriate dualization. GENO does not seem to provide any help in this regard. 3. Deep learning problems seem to be considered out of scope.  -- Update after author response -- I'd like to thank the authors for pointing out where I can find the source code. It was my mistake for not spotting the link to the GitHub repository at the bottom of the website (http://geno4neurips.pythonanywhere.com/) that generates solver code for a given example.  Regarding significance, even after the author response, I still have some doubts. Time will tell if GENO sees wide adoption.