Usually research on graph embeddings will first learn general-purpose graph embeddings. Then the learned embeddings will be used to solve various tasks regarding the graph. This paper notices that if we combine embedding learning and task optimization in an end-to-end pipeline, better results can be achieved for the tasks.   The proposed method makes intuitive sense. Instead of learning general embeddings, the method basically learns task-specific embeddings. It is not surprising that better empirical results can be achieved.   But I would argue that the proposed method sacrifices the ability to learn general-purpose embeddings. The new embeddings not longer capture general properties of the graph, but just properties related to whatever optimization task at hand, such as clustering. Also, because the embeddings are no longer general-purpose, I wonder whether it is still necessary to have the explicit graph embedding layer. Would it be possible to just have a single system specifically designed for the task optimization?