This paper proposed a method for doing active learning (AL) where in each AL iteration the optimization is done over network architecture and the underlying parameters, as opposed to other methods which fixes the architecture and only optimizes the parameters. These two optimizations are done separately, by first performing a local search among models of monotonically increasing complexity and then optimizing parameters of the obtained architecture. The authors used this method with three different active learning algorithms and showed that their method improved performance of these ALs.  The paper is very well-written and clear. The problem of architectural optimization is also of great importance in the field. One confusing thing is that the title and introduction of the paper sound as if the paper is an AL paper, whereas it is mostly addressing architecture optimization in an AL framework (which can be replaced by any querying function, including passive random selection). Therefore, it is expected that the paper gives a more comprehensive review about existing methods of architectural search (rather than AL methods). The supplementary material does include a review of the existing architecture search methods, some of which should be moved to the main text. It is not clear why a new network architecture search is needed, and what makes it more suitable for AL settings. Any existing NAS method, including those based on reinforcement learning, Bayesian optimization, etc, could be used within AL iterations, why should iNAS be a better choice for this purpose?  Moreover, is the proposed algorithm scalable to large data sets as it has to train/test multiple model architectures in each AL iterations? Does the model get fine-tuned in each iNAS iteration, or it gets trained from scratch? In the early AL iteration when there is small number of labeled samples, how reliable is the architecture selection as the size of the validation fold would be very small?  Finally, it might not always be the case that more data induce deeper (more complicated) model. One can even imagine a scenario when smaller number of samples might lead to selecting a model with higher complexity as the underlying pattern in the data distribution might not be visible when there is smaller number of samples. Why did the authors allow the algorithm to only move towards increasing complexity in each iNAS iteration?