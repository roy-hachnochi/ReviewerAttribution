** Summary ** This paper presents a new way of NAS called Neural Architecture Transformer (briefly, NAT), that can refine a network to a better one. NAT leverages GCN to encode a network as a representation. A policy network is used, which takes the current network as input, and outputs a probability over the possible operation, indicating which kind of operation should be applied to two nodes. In this paper, three types of operation are allowed: keeping the original operation, replacing it with “skip_connect” and removing this operation. Experiments on CIFAR10 and ImageNet are conducted to verify the proposed algorithm.  ** Originality **  This paper shows a light idea of NAS by refining an input neural network. This idea is interesting to me.  A policy network is introduced to determine whether an operation should be kept, removed or “skip_connect”ed. Another point is that different from NAO, NAT use GCN to represent a network.  ** Clarity ** This paper is easy to follow and well-written. However, I think there are some places that are confusing: 1. Line 191, can you provide a specific form of $\mathcal{L}(\varpi, w)$? 2. In Eqn.(2), how the “s.t. c(\alpha) \le \kappa” is applied to your optimization process? 3. Will each computation architecture (i.e., the architecture in the dashed line, Figure 1) in the network be pruned in the same way or different ways? 4. Is Cutout used in your experiment? As this is very crucial to evaluate the performances.  ** Significance ** 1. In current scheme, NAT can only replace the “Original computation module” to “skip connection” or “null”. (i.e., the “none”, “same” and “skip_connect”in “genotypes.py”). As a result, compared to NAO, the improvement is not so significant. As shown in Table 1, Table 2 and Figure 9 and Figure 10 in the supplementary document, the improvement compared to NAO is marginal.  2. It seems that when the baseline is stronger (like the ENAS, Darts), NAT cannot significant boost the baseline, without much reduction of parameters (see Table 2, CIFAR-10). Then, why we need NAT when we have ENAS? 3. Did you try further tuning the output of NAONet using NAT? That is, Table 3 lacks a column “NAO”. 4. Do you use Cutout in training networks?   ** Reference ** The following work, which works on evolving from a good model, should also be discussed. [1] The Evolved Transformer, ICML’19   ** post rebuttal ** Thanks for the reponse. (1) reply to Q12: please kindly express how you address this problem clearly in the next version. (2) reply to Q15: I understand that NAT can further boost the performances of the input model， but I am not sure whether such improvement can be achieved by the simple parameter tuning tricks, like use different random seeds, different dropouts, etc. Hope the authors can provide more discussions in the future.  (3) reply to Q16: Thanks for the detailed results. I hope in the next version, you can add the following result(s): Given a network searched by NAO + coutout (instead of NAO-WS), what accuracy can your approach reach?  Overall, I think this is an interesting paper for NAS literature. Hope the authors can provide better ways in the future, since currently, the improvement over strong models are not very significant.   I remain my score as "6".