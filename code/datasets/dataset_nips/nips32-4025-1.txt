Updated Comments Following Authors' Response :   I thank the authors for their responses and extending their experiments according to the comments. For the experiment on the effect of the number of rows on test error, I think it would be interesting to view some plots to see if there's an elbow, which might indicate a good trade-off between computational savings and reconstruction error. I had noted that I'd be willing to increase my score if the authors extend their experiments, and I did. ******* The authors consider the problem of low rank approximation of a matrix A, using a 'sketching-matrix' based method. The idea is to multiply A with a random matrix S, so as to reduce the number of rows of A, and obtain an approximation using the SVD of SA, instead of A. The authors argue that a 'learned' S can do potentially better than a random one. They also note that a learned S may not have a good worst-case performance, and they consider a hybrid approach where a portion of the matrix (some of the rows) is randomly selected and fixed during learning (learning may or may not have information about the fixed rows, giving two different cases). They demonstrate their claims experimentally.  The learning is performed using stochastic gradient descent, where the gradients are computed numerically by PyTorch. In order to obtain a differentiable 'SVD' operation, that appears in the expression for the cost function, the authors resort to a method based on power iterations (with a fixed number of iterations, T).  In terms of theoretical analysis, the authors note that by adding rows to S, one obtains a better approximation. Apart from this modest result, they also provide in the appendix some worst case analysis for the case where S has a single row. However, even though this analysis is mentioned in the introduction, this issue is not treated at all in the rest of the main text.  Overall, the idea looks potentially interesting, but I think the experiments can be modified to better demonstrate how useful this scheme can be in practice.  Here are some specific comments :  - In the statement of Thm 1, should V_* and V_1 be transposed?  - Doesn't Claim 1 say that if you increase the search space in an optimization problem, you get a better solution? I don't think you need to include that as a separate claim.  - For the video experiments, do you obtain a different S for each dataset? That is, is the S used for Logo different than the one for Friends, etc.? I got the impression that this is the case, and the following comments are based on this understanding. In fact, I was expecting to see an experiment where training is performed on a vast collection of images, and a single 'S' matrix to be proposed for that collection. With the current setup, isn't the utility of the idea limited? What is the typical application you have in mind?  - If we were to use the three video sets (Logo, Friends, Eagle) to obtain a single sketching matrix S, does that S still lead to a much better approximation than that from a random S?  - The worst case performance is addressed in the experiments. I think one way to obtain an idea might be to use an S computed for Logo, say, and use it to obtain an approximation from an image from Eagle, for instance. Then you could compare that with random/mixed etc.  - Is there any structure on the learned skecthing matrix S? If so, is that structure more or less common across different video sets?  - The number of random vs learned rows appears to be the same in the experiments, and this still gives decent performance. If we reduce the ratio of the number of learned rows, how does the error curve with respect to the ratio change? If one could get away with a good performance when only a single row is learned, that would save computation time for learning (even though that's done offline).