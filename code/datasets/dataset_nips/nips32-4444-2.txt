The paper extends the previous fully-connected-layer based Neural Tangent Kernel (NTK) to Convolutional NTK (CNTK) and provides the first efficient exact computation algorithm. It results in a significant new benchmark for the performance of the pure kernel-based method on CIFAR-10.   **Pros:** 1. The paper is clearly written and well-structured.  2. Theoretically, compared to previous results, it provides a non-asymptotic bound for NTK and looses the (sequential) limit of width requirements. It also shows the equivalence of a fully-trained sufficiently wide neural net and the deterministic kernel predictor using NTK. The theoretical analysis part is solid and important.  3. Technically, it extends NTK to CNTK (focusing on ReLU-based CNNs) for exact CNTK computation and provides some tricks (rely on the ReLU activation) to optimize the computation efficiency. It is important for both researchers practitioners, e.g., better understand the generalization performance of deep learning.  **Cons:** 1. The section I in the appendix specifies the implementation tricks for GPUs, but the benefits (e.g., effectiveness, improved efficiency) of these tricks are unclear. A simple justification through some benchmarking experiments could be helpful. It would be great if the authors can also comment on the potential of giving the efficient exact algorithm to compute CNTK for other activation functions.  2. The lack of experimental details makes benchmarking results a bit less convincing. For example, what is the number of channels used for each layer, and what is its range? I think line 388 shows the number of channels is treated as a hyper-parameter and the best performance is reported among all hyper-parameters. Is it indicate that different depths might have different # of channels, or even different convolutional layers might have different # of channels?  Is it possible to show a figure similar to Figure 6 in [Novak et al., 2019]? Otherwise, the comment (line 290) is less conclusive. Also, more justifications are required, e.g., why CNN-GAP suddenly has a quality loss for depth-11 but improves again for depth-21. BTW, how many repeated evaluations do Table 1 perform and what score is reported (average, or median as in Table 2)?     **Minor comments:** 1. Line 126, ‘out’ should be ‘our’ 2. The proposed CNTK extension and its exact computation is a combination of the existing NTK with dynamic programming (specific to ReLU activation function). This part (Section 4) is a bit technical (with limited novelty) and independent to Section 3, while the title/introduction indeed is more focus on Section 4. Strengthening Section 4, e.g., including the residual layer, extending to more activation functions, or supporting softmax and cross-entropy, would make the whole story more solid. Open-sourcing an efficient NTK/CNTK computation framework could also connect these theoretical understanding to deep learning practitioners. 