This is a groundbreaking result in the area of sketch and coreset. A large number of existing algorithms in sketch and coreset are randomized and approximate, which prevents those algorithms from being used in practice. The current paper presents a new deterministic coreset which receives a matrix A with n rows and d columns, and outputs a matrix A' with d^2 + 1 rows and d columns, such that rows of A' are scaled rows of A and A^TA equals A'^TA' *with no approximation*. Caratheodory's Theorem in fact implies the existence of such matrix A' and an inefficient algorithm, and the main contribution of this paper is a new practical algorithm which calculates the Caratheodory set with much faster running time.   The new algorithm is elegant yet very interesting. Technically, the algorithm first partitions the given data points into k clusters and then calls the slow algorithm on k data points which correspond to the weighted mean of these k clusters. Using the output of the slow algorithm, by appropriately reweighting the data points, one can reduce the number of data points from n to O(n*k/d), at which point one can recursively call the algorithm. Thus, the algorithm terminates after log n / log (k / d) recursive calls. Another advantage of this paper is its strong experiment section. The discussion and plots presented in this section clearly demonstrate the practicality of the proposed coreset.   In summary, this is a strong paper with a novel coreset construction for least square regression. The paper is also well-written. I will fight for accepting this paper.   Minor Comments  1. It might be worth mentioning that a coreset of size Omega(d^2) is in fact the best one can hope for if the covariance matrix needs to be preserved exactly. This can be seen when A is the edge-vertex incidence matrix of a complete graph. 2. It might be better to add more details about Algorithm 8 and provide a full proof for readers who are not familiar with Caratheodory's Theorem. 3. Line 77: which lower bound in [13] are you referring to? 