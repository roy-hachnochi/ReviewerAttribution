This paper addresses the prediction of functions with vulnerabilities. The dataset used is based on real-world applications (e.g., Linux (kernel?), QEMU). The method employed represents code by combining different static code analysis techniques. All static graphs are well-known, however I haven't seen all of them combined in one graph for representing code. The graphs used are ASTs, CFG, DFG (with some simplifications, please see comments in improvements), in addition to the code treated as a sequence of tokens.  The paper is well written, generally straightforward to read and has sufficient background information on graph embeddings of code and the various graphs employed such that a reader outside of the domain can follow the discussion.   The results obtained are quite promising. In particular, I appreciated how the authors look at the latest commits in the projects they used in the dataset to understand whether their trained model could deal with code "in real time". 