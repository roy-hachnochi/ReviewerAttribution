ORIGINALITY:  + The proposed normalization technique is original in the sense that the main difference in existing normalization techniques (batch, layer, group, instance..) differ only in the dimensions over which the activations are normalized. This paper proposes removing one of the typical steps in the normalization process in order to speed up training, which has been less well-studied - This work proposes dividing by the RMS statistic instead of standard deviation without hurting accuracy. Other works (for example, Santurkar et al.) experiment with scaling by different statistics, such as various l_p norms, without a loss in training accuracy. This work is not the first to suggest scaling the activations by a different statistic  QUALITY:  + The authors tested their technique on multiple deep learning frameworks (TensorFlow, PyTorch, Theano), which gives more support to their empirical results, as different implementations can have very different timing results + The authors tested their technique on multiple tasks and neural network architectures - The main hypothesis hypothesis is that the re-centering step in Layer Normalization is dispensable, and this is backed only by experimental results and could be a lot stronger with some theoretical justification - While the few experimental results show that there is no degradation of accuracy from not centering the activations, I am still not fully convinced that the centering step can be deemed unnecessary. For example, it is likely that the weights/biases of the networks in the paper are initialized such that the activations are roughly centered around zero already, and therefore the mean-centering step can be removed without seeing much of a difference in performance. An advantage of existing techniques such as Batch Normalization and Layer Normalization is that they are more robust to hyperparameter selection such as learning rate, but more importantly in this case, weight/bias initialization. It’s possible that the proposed technique may not work as well as existing techniques for arbitrary weight/bias initializations - Would be good to also compare to Weight Normalization, which is motivated by reducing computational overhead compared to Batch Normalization  CLARITY:  + The paper is generally clearly written and each section flows logically after the next.  - Some minor details about the experiments are missing - for example, the learning rate/optimizer used for training is given for Daily Mail Reading and Image-Caption Retrieval but not Machine Translation. Weight initialization methods are missing entirely and would be useful to know for anyone trying to reimplement these results. Mention of the type of nonlinearity used in each network is also absent.  SIGNIFICANCE:  + Drop-in replacement for networks with Layer Normalization that can speed up training without reducing accuracy. Accuracy with RMSNorm/pRMSNorm is slightly better than Layer Normalization but these differences are small and it is unclear if these differences are within noise + Easy to implement in existing models, so easy for practitioners to use - Depending on the circumstances, practitioners often care about final accuracy and inference speed more than training speed. The proposed technique does not convincingly improve asymptotic accuracy and would improve inference speed over Layer Normalization, but not Batch Normalization if the inference-time parameters are ‘folded in’ to the preceding layer’s weights