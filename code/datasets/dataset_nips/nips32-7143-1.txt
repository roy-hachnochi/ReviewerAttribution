Significance: I'm not sure Spectrl enables RL to tackle new problems it couldn't before, given that the experiments are on relatively simple tasks and don't have a few baselines I'd like to see (see the "Improvements" section of my review). The approach also seems pretty specific to a certain class of problems (ones that can be specified in the particular formal language). That's fine as long as it results in significant improvements on that class of problems or enables tackling new problems entirely; I wasn't sure that was the case given the existing experiments, at least enough to warrant it's use over simpler RL methods that don't require the propose framework and its added implementation overhead / reward shaping.  Quality: I'd have liked to see more complex/challenging experiments that validate Spectrl enables something new to be done, or else that it's widely applicable or applicable to harder tasks than grid worlds. Prior work e.g. on TLTL shows experiments with an actual robotic arm, for instance. I'm also not sure how to interpret the existing experiments, given there aren't error bars and a few baselines I'd find helpful (see "Improvements" section of my review).  Clarity: Overall, the writing was clear. The method itself took a while to explain (and a lot of math), so it may help to shorten that. The conclusion is missing, though, and explanation of the final experiment (cart pole) and its results are cut short (just one paragraph).  Originality: Spectrl seems somewhat close to TLTL, except for the task monitor which can help handle non-Markovian specifications. However, I would have liked to see more experiments (and on more complex environments) that highlight that Spectrl can handle non-Markovian specifications specifically. I'm not too familiar with TLTL, but it sounds like it would be a small modification to enable TLTL to handle non-Markovian cases as well (i.e., add some extra history to the state, though if I'm wrong, please let me know in the rebuttal).