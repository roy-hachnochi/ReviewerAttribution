============================================================== After response----I keep my evaluation on the technical innovation and suboptimality of this paper.  1. The basic Spider and SpiderBoost algorithms are both for first-order stationary point, they are almost the same, and both give n^{1/2} rate. The simple way to modify both algorithms to escape saddle point is to add Negative Curvature Search (NCS) subroutine (which can be done in a very modular way, and is already shown in the Spider paper). I'd say it's almost trivial to also show SpiderBoost+NCS to find second-order stationary point with n^{1/2} rate. Comparing this paper with SpiderBoost+NCS, there's no improvement from n^{2/3} to n^{1/2} (since Spiderboost is already n^{1/2}), no simplification of Spider (as Spiderboost already did so). The only difference is replacing NCS by perturbations, which again requires some work, but most techniques are already there.  2. There are two error quantities in the guarantee---epsilon and delta. When people talk about optimal rate, it should be optimal respect to both epsilon and delta, i.e. for any choice of the pair. It is already suboptimal when one says they can match the best rate only in some restricted range. It is also clear from Table 2 when we choose epsilon = delta^2, which is a nature setting in most previous paper, this paper gives 1/epsilon^{3.5}, while SPIDER-SFO + (+Neon2) gives 1/epsilon^3. It is clearly suboptimal. ==============================================================   I think the result is solid, but this paper lacks innovation since most techniques are available in the field. It uses SPIDER [11] to do variance reduction and achieve nearly optimal rate, and uses perturbations to escape saddle points which is also available in [15, 18]. It seems to be the combination of both paper, and the rate in escaping saddle points is actually worse than [11]. I do not view the contribution to be significant enough to be published in NIPS, especially the improvement is rather straightforward and incremental compared to [15].